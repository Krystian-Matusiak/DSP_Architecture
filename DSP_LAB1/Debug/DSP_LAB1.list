
DSP_LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c1c  08006c1c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c24  08006c24  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157dc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d5  00000000  00000000  0003589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00038f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  0003a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023699  00000000  00000000  0003b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016da9  00000000  00000000  0005e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb53c  00000000  00000000  0007546a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001409a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c0  00000000  00000000  001409f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006be8 	.word	0x08006be8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006be8 	.word	0x08006be8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc04 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f91e 	bl	8000718 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f888 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8b4 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8e2 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f005 ff8e 	bl	8006408 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x4c>)
 80004f4:	f000 ff36 	bl	8001364 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80004f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fc:	f000 fc60 	bl	8000dc0 <HAL_Delay>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x4c>)
 8000508:	f000 ff2c 	bl	8001364 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800050c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000510:	f000 fc56 	bl	8000dc0 <HAL_Delay>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000514:	e7ea      	b.n	80004ec <main+0x20>
 8000516:	bf00      	nop
 8000518:	40020c00 	.word	0x40020c00

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fa56 	bl	80069dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f8ca 	bl	800373c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f9b1 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fb2b 	bl	8003c2c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f99a 	bl	8000914 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 faa1 	bl	8002b74 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f96c 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000ac 	.word	0x200000ac
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fbb6 	bl	8002dfc <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f93d 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000100 	.word	0x20000100
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 fde1 	bl	80042c4 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f904 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000148 	.word	0x20000148
 8000714:	40013000 	.word	0x40013000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b72      	ldr	r3, [pc, #456]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a71      	ldr	r2, [pc, #452]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b6f      	ldr	r3, [pc, #444]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b6b      	ldr	r3, [pc, #428]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a6a      	ldr	r2, [pc, #424]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b68      	ldr	r3, [pc, #416]	; (80008fc <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b64      	ldr	r3, [pc, #400]	; (80008fc <MX_GPIO_Init+0x1e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a63      	ldr	r2, [pc, #396]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a5c      	ldr	r2, [pc, #368]	; (80008fc <MX_GPIO_Init+0x1e4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b56      	ldr	r3, [pc, #344]	; (80008fc <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a55      	ldr	r2, [pc, #340]	; (80008fc <MX_GPIO_Init+0x1e4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b4f      	ldr	r3, [pc, #316]	; (80008fc <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a4e      	ldr	r2, [pc, #312]	; (80008fc <MX_GPIO_Init+0x1e4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4849      	ldr	r0, [pc, #292]	; (8000900 <MX_GPIO_Init+0x1e8>)
 80007dc:	f000 fdc2 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4847      	ldr	r0, [pc, #284]	; (8000904 <MX_GPIO_Init+0x1ec>)
 80007e6:	f000 fdbd 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4845      	ldr	r0, [pc, #276]	; (8000908 <MX_GPIO_Init+0x1f0>)
 80007f2:	f000 fdb7 	bl	8001364 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	483c      	ldr	r0, [pc, #240]	; (8000900 <MX_GPIO_Init+0x1e8>)
 800080e:	f000 fc0d 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4836      	ldr	r0, [pc, #216]	; (8000904 <MX_GPIO_Init+0x1ec>)
 800082a:	f000 fbff 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	482e      	ldr	r0, [pc, #184]	; (8000904 <MX_GPIO_Init+0x1ec>)
 800084a:	f000 fbef 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000852:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	482a      	ldr	r0, [pc, #168]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000864:	f000 fbe2 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000868:	2304      	movs	r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4825      	ldr	r0, [pc, #148]	; (8000910 <MX_GPIO_Init+0x1f8>)
 800087c:	f000 fbd6 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <MX_GPIO_Init+0x1f8>)
 800089e:	f000 fbc5 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_GPIO_Init+0x1f0>)
 80008bc:	f000 fbb6 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_GPIO_Init+0x1f0>)
 80008d4:	f000 fbaa 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0x1e8>)
 80008ee:	f000 fb9d 	bl	800102c <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40021000 	.word	0x40021000
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	40020000 	.word	0x40020000
 8000910:	40020400 	.word	0x40020400

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095e:	2007      	movs	r0, #7
 8000960:	f000 fb22 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <HAL_I2C_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12c      	bne.n	80009ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_I2C_MspInit+0x8c>)
 80009cc:	f000 fb2e 	bl	800102c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0x88>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400

08000a00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <HAL_I2S_MspInit+0xf0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d15a      	bne.n	8000ae6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a34:	23c0      	movs	r3, #192	; 0xc0
 8000a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 faff 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a4c:	f7ff ff62 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <HAL_I2S_MspInit+0xf8>)
 8000ac0:	f000 fab4 	bl	800102c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ac4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <HAL_I2S_MspInit+0xfc>)
 8000ae2:	f000 faa3 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40003c00 	.word	0x40003c00
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_SPI_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5a:	23e0      	movs	r3, #224	; 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_SPI_MspInit+0x8c>)
 8000b76:	f000 fa59 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f8d0 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <OTG_FS_IRQHandler+0x10>)
 8000bea:	f000 fe3f 	bl	800186c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000584 	.word	0x20000584

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f005 fe9e 	bl	8006968 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200001a0 	.word	0x200001a0
 8000c60:	20000898 	.word	0x20000898

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f005 fe5d 	bl	8006974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc07 	bl	80004cc <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ccc:	08006c2c 	.word	0x08006c2c
  ldr r2, =_sbss
 8000cd0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cd4:	20000898 	.word	0x20000898

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f94f 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe06 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f967 	bl	8001012 <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 f92f 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200001a4 	.word	0x200001a4

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200001a4 	.word	0x200001a4

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff29 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff3e 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff31 	bl	8000e6c <__NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffa2 	bl	8000f64 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e16b      	b.n	8001320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 815a 	bne.w	800131a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d005      	beq.n	800107e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	2b02      	cmp	r3, #2
 800107c:	d130      	bne.n	80010e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 0201 	and.w	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d017      	beq.n	800111c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d123      	bne.n	8001170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	69b9      	ldr	r1, [r7, #24]
 800116c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0203 	and.w	r2, r3, #3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80b4 	beq.w	800131a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b60      	ldr	r3, [pc, #384]	; (8001338 <HAL_GPIO_Init+0x30c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <HAL_GPIO_Init+0x30c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <HAL_GPIO_Init+0x30c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ce:	4a5b      	ldr	r2, [pc, #364]	; (800133c <HAL_GPIO_Init+0x310>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x314>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d02b      	beq.n	8001252 <HAL_GPIO_Init+0x226>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a51      	ldr	r2, [pc, #324]	; (8001344 <HAL_GPIO_Init+0x318>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d025      	beq.n	800124e <HAL_GPIO_Init+0x222>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x31c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d01f      	beq.n	800124a <HAL_GPIO_Init+0x21e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_GPIO_Init+0x320>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d019      	beq.n	8001246 <HAL_GPIO_Init+0x21a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4e      	ldr	r2, [pc, #312]	; (8001350 <HAL_GPIO_Init+0x324>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0x216>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_GPIO_Init+0x328>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00d      	beq.n	800123e <HAL_GPIO_Init+0x212>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_GPIO_Init+0x32c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x20e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_GPIO_Init+0x330>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_GPIO_Init+0x20a>
 8001232:	2307      	movs	r3, #7
 8001234:	e00e      	b.n	8001254 <HAL_GPIO_Init+0x228>
 8001236:	2308      	movs	r3, #8
 8001238:	e00c      	b.n	8001254 <HAL_GPIO_Init+0x228>
 800123a:	2306      	movs	r3, #6
 800123c:	e00a      	b.n	8001254 <HAL_GPIO_Init+0x228>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x228>
 8001242:	2304      	movs	r3, #4
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x228>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x228>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x228>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x228>
 8001252:	2300      	movs	r3, #0
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <HAL_GPIO_Init+0x310>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_GPIO_Init+0x334>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001296:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_GPIO_Init+0x334>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_GPIO_Init+0x334>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c0:	4a27      	ldr	r2, [pc, #156]	; (8001360 <HAL_GPIO_Init+0x334>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x334>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_GPIO_Init+0x334>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_GPIO_Init+0x334>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_GPIO_Init+0x334>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	f67f ae90 	bls.w	8001048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40013800 	.word	0x40013800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40021400 	.word	0x40021400
 8001358:	40021800 	.word	0x40021800
 800135c:	40021c00 	.word	0x40021c00
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001398:	b08f      	sub	sp, #60	; 0x3c
 800139a:	af0a      	add	r7, sp, #40	; 0x28
 800139c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e054      	b.n	8001452 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f005 f874 	bl	80064b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f867 	bl	80044ba <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687e      	ldr	r6, [r7, #4]
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	1d33      	adds	r3, r6, #4
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f002 ffe1 	bl	80043d6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	4618      	mov	r0, r3
 800141c:	f003 f85e 	bl	80044dc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	687e      	ldr	r6, [r7, #4]
 8001428:	466d      	mov	r5, sp
 800142a:	f106 0410 	add.w	r4, r6, #16
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800143a:	e885 0003 	stmia.w	r5, {r0, r1}
 800143e:	1d33      	adds	r3, r6, #4
 8001440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f003 f9e6 	bl	8004814 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800145a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800145a:	b590      	push	{r4, r7, lr}
 800145c:	b089      	sub	sp, #36	; 0x24
 800145e:	af04      	add	r7, sp, #16
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	4608      	mov	r0, r1
 8001464:	4611      	mov	r1, r2
 8001466:	461a      	mov	r2, r3
 8001468:	4603      	mov	r3, r0
 800146a:	70fb      	strb	r3, [r7, #3]
 800146c:	460b      	mov	r3, r1
 800146e:	70bb      	strb	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_HCD_HC_Init+0x28>
 800147e:	2302      	movs	r3, #2
 8001480:	e076      	b.n	8001570 <HAL_HCD_HC_Init+0x116>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	333d      	adds	r3, #61	; 0x3d
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	212c      	movs	r1, #44	; 0x2c
 80014a2:	fb01 f303 	mul.w	r3, r1, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	3338      	adds	r3, #56	; 0x38
 80014aa:	787a      	ldrb	r2, [r7, #1]
 80014ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	212c      	movs	r1, #44	; 0x2c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	3340      	adds	r3, #64	; 0x40
 80014bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3339      	adds	r3, #57	; 0x39
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	333f      	adds	r3, #63	; 0x3f
 80014e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	78ba      	ldrb	r2, [r7, #2]
 80014ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014ee:	b2d0      	uxtb	r0, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	333a      	adds	r3, #58	; 0x3a
 80014fc:	4602      	mov	r2, r0
 80014fe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001500:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001504:	2b00      	cmp	r3, #0
 8001506:	da09      	bge.n	800151c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	333b      	adds	r3, #59	; 0x3b
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e008      	b.n	800152e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	333b      	adds	r3, #59	; 0x3b
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	333c      	adds	r3, #60	; 0x3c
 800153c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001540:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	787c      	ldrb	r4, [r7, #1]
 8001548:	78ba      	ldrb	r2, [r7, #2]
 800154a:	78f9      	ldrb	r1, [r7, #3]
 800154c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	f897 3020 	ldrb.w	r3, [r7, #32]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	4623      	mov	r3, r4
 800155e:	f003 fab5 	bl	8004acc <USB_HC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}

08001578 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_HCD_HC_Halt+0x1e>
 8001592:	2302      	movs	r3, #2
 8001594:	e00f      	b.n	80015b6 <HAL_HCD_HC_Halt+0x3e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fd05 	bl	8004fb6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	70fb      	strb	r3, [r7, #3]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70bb      	strb	r3, [r7, #2]
 80015d6:	4613      	mov	r3, r2
 80015d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	212c      	movs	r1, #44	; 0x2c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	333b      	adds	r3, #59	; 0x3b
 80015e8:	78ba      	ldrb	r2, [r7, #2]
 80015ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	212c      	movs	r1, #44	; 0x2c
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	333f      	adds	r3, #63	; 0x3f
 80015fa:	787a      	ldrb	r2, [r7, #1]
 80015fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015fe:	7c3b      	ldrb	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d112      	bne.n	800162a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	3342      	adds	r3, #66	; 0x42
 8001612:	2203      	movs	r2, #3
 8001614:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	212c      	movs	r1, #44	; 0x2c
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	333d      	adds	r3, #61	; 0x3d
 8001624:	7f3a      	ldrb	r2, [r7, #28]
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e008      	b.n	800163c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	212c      	movs	r1, #44	; 0x2c
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	3342      	adds	r3, #66	; 0x42
 8001638:	2202      	movs	r2, #2
 800163a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b03      	cmp	r3, #3
 8001640:	f200 80c6 	bhi.w	80017d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	0800165d 	.word	0x0800165d
 8001650:	080017bd 	.word	0x080017bd
 8001654:	080016c1 	.word	0x080016c1
 8001658:	0800173f 	.word	0x0800173f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800165c:	7c3b      	ldrb	r3, [r7, #16]
 800165e:	2b01      	cmp	r3, #1
 8001660:	f040 80b8 	bne.w	80017d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001664:	78bb      	ldrb	r3, [r7, #2]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80b4 	bne.w	80017d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800166c:	8b3b      	ldrh	r3, [r7, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d108      	bne.n	8001684 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	3355      	adds	r3, #85	; 0x55
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3355      	adds	r3, #85	; 0x55
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	212c      	movs	r1, #44	; 0x2c
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	3342      	adds	r3, #66	; 0x42
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016aa:	e093      	b.n	80017d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	212c      	movs	r1, #44	; 0x2c
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3342      	adds	r3, #66	; 0x42
 80016ba:	2202      	movs	r2, #2
 80016bc:	701a      	strb	r2, [r3, #0]
      break;
 80016be:	e089      	b.n	80017d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016c0:	78bb      	ldrb	r3, [r7, #2]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11d      	bne.n	8001702 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	212c      	movs	r1, #44	; 0x2c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	3355      	adds	r3, #85	; 0x55
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3342      	adds	r3, #66	; 0x42
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016ec:	e073      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3342      	adds	r3, #66	; 0x42
 80016fc:	2202      	movs	r2, #2
 80016fe:	701a      	strb	r2, [r3, #0]
      break;
 8001700:	e069      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3354      	adds	r3, #84	; 0x54
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	3342      	adds	r3, #66	; 0x42
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
      break;
 8001728:	e055      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	3342      	adds	r3, #66	; 0x42
 8001738:	2202      	movs	r2, #2
 800173a:	701a      	strb	r2, [r3, #0]
      break;
 800173c:	e04b      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800173e:	78bb      	ldrb	r3, [r7, #2]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11d      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	212c      	movs	r1, #44	; 0x2c
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4413      	add	r3, r2
 8001750:	3355      	adds	r3, #85	; 0x55
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3342      	adds	r3, #66	; 0x42
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800176a:	e034      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2202      	movs	r2, #2
 800177c:	701a      	strb	r2, [r3, #0]
      break;
 800177e:	e02a      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3354      	adds	r3, #84	; 0x54
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	3342      	adds	r3, #66	; 0x42
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
      break;
 80017a6:	e016      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	3342      	adds	r3, #66	; 0x42
 80017b6:	2202      	movs	r2, #2
 80017b8:	701a      	strb	r2, [r3, #0]
      break;
 80017ba:	e00c      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	3342      	adds	r3, #66	; 0x42
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017d0:	bf00      	nop
 80017d2:	e000      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	3344      	adds	r3, #68	; 0x44
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	8b3a      	ldrh	r2, [r7, #24]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	202c      	movs	r0, #44	; 0x2c
 80017f0:	fb00 f303 	mul.w	r3, r0, r3
 80017f4:	440b      	add	r3, r1
 80017f6:	334c      	adds	r3, #76	; 0x4c
 80017f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3360      	adds	r3, #96	; 0x60
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3350      	adds	r3, #80	; 0x50
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3339      	adds	r3, #57	; 0x39
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3361      	adds	r3, #97	; 0x61
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	222c      	movs	r2, #44	; 0x2c
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	3338      	adds	r3, #56	; 0x38
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	18d1      	adds	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	f003 fa58 	bl	8004d10 <USB_HC_StartXfer>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop

0800186c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f002 ff83 	bl	800478e <USB_GetMode>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	f040 80f6 	bne.w	8001a7c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 ff67 	bl	8004768 <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80ec 	beq.w	8001a7a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 ff5e 	bl	8004768 <USB_ReadInterrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b6:	d104      	bne.n	80018c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 ff4e 	bl	8004768 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d6:	d104      	bne.n	80018e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 ff3e 	bl	8004768 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018f6:	d104      	bne.n	8001902 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 ff2e 	bl	8004768 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b02      	cmp	r3, #2
 8001914:	d103      	bne.n	800191e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2202      	movs	r2, #2
 800191c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 ff20 	bl	8004768 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800192e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001932:	d11c      	bne.n	800196e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800193c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800194e:	2110      	movs	r1, #16
 8001950:	6938      	ldr	r0, [r7, #16]
 8001952:	f002 fe0f 	bl	8004574 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001956:	6938      	ldr	r0, [r7, #16]
 8001958:	f002 fe40 	bl	80045dc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f003 f816 	bl	8004994 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f004 fe1f 	bl	80065ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fef8 	bl	8004768 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001982:	d102      	bne.n	800198a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f001 f882 	bl	8002a8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 feea 	bl	8004768 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b08      	cmp	r3, #8
 800199c:	d106      	bne.n	80019ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f004 fde8 	bl	8006574 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2208      	movs	r2, #8
 80019aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fed9 	bl	8004768 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d101      	bne.n	80019c4 <HAL_HCD_IRQHandler+0x158>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_HCD_IRQHandler+0x15a>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d012      	beq.n	80019f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0210 	bic.w	r2, r2, #16
 80019d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 ff85 	bl	80028ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 feb7 	bl	8004768 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a04:	d13a      	bne.n	8001a7c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fac2 	bl	8004f94 <USB_HC_ReadInterrupt>
 8001a10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e025      	b.n	8001a64 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d018      	beq.n	8001a5e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a42:	d106      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f88f 	bl	8001b6e <HCD_HC_IN_IRQHandler>
 8001a50:	e005      	b.n	8001a5e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fbdd 	bl	8002218 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3d4      	bcc.n	8001a18 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	e000      	b.n	8001a7c <HAL_HCD_IRQHandler+0x210>
      return;
 8001a7a:	bf00      	nop
    }
  }
}
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_HCD_Start+0x16>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e013      	b.n	8001ac0 <HAL_HCD_Start+0x3e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 ffae 	bl	8004a08 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fcf1 	bl	8004498 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_HCD_Stop+0x16>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e00d      	b.n	8001afa <HAL_HCD_Stop+0x32>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fb9c 	bl	8005228 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3360      	adds	r3, #96	; 0x60
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3350      	adds	r3, #80	; 0x50
 8001b44:	681b      	ldr	r3, [r3, #0]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 ffa2 	bl	8004aa8 <USB_GetCurrentFrame>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d11a      	bne.n	8001bd4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	461a      	mov	r2, r3
 8001bac:	2304      	movs	r3, #4
 8001bae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3361      	adds	r3, #97	; 0x61
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 f9f2 	bl	8004fb6 <USB_HC_Halt>
 8001bd2:	e0af      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bea:	d11b      	bne.n	8001c24 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	212c      	movs	r1, #44	; 0x2c
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3361      	adds	r3, #97	; 0x61
 8001c0e:	2207      	movs	r2, #7
 8001c10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 f9ca 	bl	8004fb6 <USB_HC_Halt>
 8001c22:	e087      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d109      	bne.n	8001c4e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	461a      	mov	r2, r3
 8001c48:	2320      	movs	r3, #32
 8001c4a:	6093      	str	r3, [r2, #8]
 8001c4c:	e072      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d11a      	bne.n	8001c9a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	461a      	mov	r2, r3
 8001c72:	2308      	movs	r3, #8
 8001c74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3361      	adds	r3, #97	; 0x61
 8001c84:	2205      	movs	r2, #5
 8001c86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f98f 	bl	8004fb6 <USB_HC_Halt>
 8001c98:	e04c      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb0:	d11b      	bne.n	8001cea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3361      	adds	r3, #97	; 0x61
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 f967 	bl	8004fb6 <USB_HC_Halt>
 8001ce8:	e024      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d119      	bne.n	8001d34 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3361      	adds	r3, #97	; 0x61
 8001d20:	2206      	movs	r2, #6
 8001d22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 f941 	bl	8004fb6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4a:	d112      	bne.n	8001d72 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 f92d 	bl	8004fb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d70:	e24e      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	f040 80df 	bne.w	8001f48 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d019      	beq.n	8001dc6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3348      	adds	r3, #72	; 0x48
 8001da0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	0159      	lsls	r1, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	440b      	add	r3, r1
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001db4:	1ad2      	subs	r2, r2, r3
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	202c      	movs	r0, #44	; 0x2c
 8001dbc:	fb00 f303 	mul.w	r3, r0, r3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3350      	adds	r3, #80	; 0x50
 8001dc4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	335c      	adds	r3, #92	; 0x5c
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	461a      	mov	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	333f      	adds	r3, #63	; 0x3f
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	333f      	adds	r3, #63	; 0x3f
 8001e1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d111      	bne.n	8001e48 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f8c1 	bl	8004fb6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	461a      	mov	r2, r3
 8001e42:	2310      	movs	r3, #16
 8001e44:	6093      	str	r3, [r2, #8]
 8001e46:	e03a      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	333f      	adds	r3, #63	; 0x3f
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d009      	beq.n	8001e70 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	333f      	adds	r3, #63	; 0x3f
 8001e6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d126      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	0151      	lsls	r1, r2, #5
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	440a      	add	r2, r1
 8001e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e8e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	b2d9      	uxtb	r1, r3
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	202c      	movs	r0, #44	; 0x2c
 8001eac:	fb00 f303 	mul.w	r3, r0, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3360      	adds	r3, #96	; 0x60
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f004 fb85 	bl	80065c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d12b      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3348      	adds	r3, #72	; 0x48
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	202c      	movs	r0, #44	; 0x2c
 8001edc:	fb00 f202 	mul.w	r2, r0, r2
 8001ee0:	440a      	add	r2, r1
 8001ee2:	3240      	adds	r2, #64	; 0x40
 8001ee4:	8812      	ldrh	r2, [r2, #0]
 8001ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 818e 	beq.w	8002210 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	212c      	movs	r1, #44	; 0x2c
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	3354      	adds	r3, #84	; 0x54
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	3354      	adds	r3, #84	; 0x54
 8001f18:	4602      	mov	r2, r0
 8001f1a:	701a      	strb	r2, [r3, #0]
}
 8001f1c:	e178      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3354      	adds	r3, #84	; 0x54
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2d8      	uxtb	r0, r3
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3354      	adds	r3, #84	; 0x54
 8001f42:	4602      	mov	r2, r0
 8001f44:	701a      	strb	r2, [r3, #0]
}
 8001f46:	e163      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	f040 80f6 	bne.w	800214c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3361      	adds	r3, #97	; 0x61
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d109      	bne.n	8001f88 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	3360      	adds	r3, #96	; 0x60
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e0c9      	b.n	800211c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3361      	adds	r3, #97	; 0x61
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d109      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3360      	adds	r3, #96	; 0x60
 8001faa:	2205      	movs	r2, #5
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e0b5      	b.n	800211c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	3361      	adds	r3, #97	; 0x61
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b06      	cmp	r3, #6
 8001fc2:	d009      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3361      	adds	r3, #97	; 0x61
 8001fd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d150      	bne.n	800207a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	335c      	adds	r3, #92	; 0x5c
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	202c      	movs	r0, #44	; 0x2c
 8001ff0:	fb00 f303 	mul.w	r3, r0, r3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	335c      	adds	r3, #92	; 0x5c
 8001ff8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	335c      	adds	r3, #92	; 0x5c
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d912      	bls.n	8002034 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	335c      	adds	r3, #92	; 0x5c
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3360      	adds	r3, #96	; 0x60
 800202e:	2204      	movs	r2, #4
 8002030:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002032:	e073      	b.n	800211c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800205c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002064:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002078:	e050      	b.n	800211c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3361      	adds	r3, #97	; 0x61
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d122      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3360      	adds	r3, #96	; 0x60
 800209c:	2202      	movs	r2, #2
 800209e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e023      	b.n	800211c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3361      	adds	r3, #97	; 0x61
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b07      	cmp	r3, #7
 80020e6:	d119      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	335c      	adds	r3, #92	; 0x5c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	202c      	movs	r0, #44	; 0x2c
 8002100:	fb00 f303 	mul.w	r3, r0, r3
 8002104:	440b      	add	r3, r1
 8002106:	335c      	adds	r3, #92	; 0x5c
 8002108:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3360      	adds	r3, #96	; 0x60
 8002118:	2204      	movs	r2, #4
 800211a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	461a      	mov	r2, r3
 800212a:	2302      	movs	r3, #2
 800212c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	b2d9      	uxtb	r1, r3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	202c      	movs	r0, #44	; 0x2c
 8002138:	fb00 f303 	mul.w	r3, r0, r3
 800213c:	4413      	add	r3, r2
 800213e:	3360      	adds	r3, #96	; 0x60
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f004 fa3f 	bl	80065c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800214a:	e061      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	d156      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	333f      	adds	r3, #63	; 0x3f
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d111      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f002 ff0f 	bl	8004fb6 <USB_HC_Halt>
 8002198:	e031      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	333f      	adds	r3, #63	; 0x3f
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	333f      	adds	r3, #63	; 0x3f
 80021bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d11d      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d110      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3361      	adds	r3, #97	; 0x61
 80021ea:	2203      	movs	r2, #3
 80021ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fedc 	bl	8004fb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2310      	movs	r3, #16
 800220e:	6093      	str	r3, [r2, #8]
}
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d11a      	bne.n	800227e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2304      	movs	r3, #4
 8002258:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3361      	adds	r3, #97	; 0x61
 8002268:	2206      	movs	r2, #6
 800226a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f002 fe9d 	bl	8004fb6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800227c:	e331      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b20      	cmp	r3, #32
 8002292:	d12e      	bne.n	80022f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	2320      	movs	r3, #32
 80022a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333d      	adds	r3, #61	; 0x3d
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	f040 8313 	bne.w	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	333d      	adds	r3, #61	; 0x3d
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3360      	adds	r3, #96	; 0x60
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fe63 	bl	8004fb6 <USB_HC_Halt>
}
 80022f0:	e2f7      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002308:	d112      	bne.n	8002330 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fe44 	bl	8004fb6 <USB_HC_Halt>
}
 800232e:	e2d8      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d140      	bne.n	80023c8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	335c      	adds	r3, #92	; 0x5c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b40      	cmp	r3, #64	; 0x40
 800236c:	d111      	bne.n	8002392 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	333d      	adds	r3, #61	; 0x3d
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	2301      	movs	r3, #1
 80023a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3361      	adds	r3, #97	; 0x61
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fdf8 	bl	8004fb6 <USB_HC_Halt>
}
 80023c6:	e28c      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d12c      	bne.n	8002438 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3361      	adds	r3, #97	; 0x61
 80023ec:	2204      	movs	r2, #4
 80023ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	333d      	adds	r3, #61	; 0x3d
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fdc9 	bl	8004fb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	461a      	mov	r2, r3
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	6093      	str	r3, [r2, #8]
}
 8002436:	e254      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b08      	cmp	r3, #8
 800244c:	d11a      	bne.n	8002484 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2308      	movs	r3, #8
 800245e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3361      	adds	r3, #97	; 0x61
 800246e:	2205      	movs	r2, #5
 8002470:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fd9a 	bl	8004fb6 <USB_HC_Halt>
}
 8002482:	e22e      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b10      	cmp	r3, #16
 8002498:	d140      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	335c      	adds	r3, #92	; 0x5c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3361      	adds	r3, #97	; 0x61
 80024ba:	2203      	movs	r2, #3
 80024bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d112      	bne.n	80024f8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333c      	adds	r3, #60	; 0x3c
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	333d      	adds	r3, #61	; 0x3d
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fd57 	bl	8004fb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	6093      	str	r3, [r2, #8]
}
 800251a:	e1e2      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d164      	bne.n	80025fc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d111      	bne.n	800255e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3361      	adds	r3, #97	; 0x61
 8002548:	2206      	movs	r2, #6
 800254a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fd2d 	bl	8004fb6 <USB_HC_Halt>
 800255c:	e044      	b.n	80025e8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	335c      	adds	r3, #92	; 0x5c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	202c      	movs	r0, #44	; 0x2c
 8002576:	fb00 f303 	mul.w	r3, r0, r3
 800257a:	440b      	add	r3, r1
 800257c:	335c      	adds	r3, #92	; 0x5c
 800257e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	335c      	adds	r3, #92	; 0x5c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d920      	bls.n	80025d6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	335c      	adds	r3, #92	; 0x5c
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	2204      	movs	r2, #4
 80025b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	b2d9      	uxtb	r1, r3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	202c      	movs	r0, #44	; 0x2c
 80025c2:	fb00 f303 	mul.w	r3, r0, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3360      	adds	r3, #96	; 0x60
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f003 fffa 	bl	80065c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025d4:	e008      	b.n	80025e8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3360      	adds	r3, #96	; 0x60
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	6093      	str	r3, [r2, #8]
}
 80025fa:	e172      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002612:	d11b      	bne.n	800264c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3361      	adds	r3, #97	; 0x61
 8002622:	2208      	movs	r2, #8
 8002624:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fcc0 	bl	8004fb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002648:	6093      	str	r3, [r2, #8]
}
 800264a:	e14a      	b.n	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	f040 813f 	bne.w	80028e2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3361      	adds	r3, #97	; 0x61
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d17d      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	333f      	adds	r3, #63	; 0x3f
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d00a      	beq.n	80026b4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333f      	adds	r3, #63	; 0x3f
 80026ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	f040 8100 	bne.w	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d113      	bne.n	80026e4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3355      	adds	r3, #85	; 0x55
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2d8      	uxtb	r0, r3
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3355      	adds	r3, #85	; 0x55
 80026e0:	4602      	mov	r2, r0
 80026e2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 80e3 	bne.w	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	334c      	adds	r3, #76	; 0x4c
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80d8 	beq.w	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	334c      	adds	r3, #76	; 0x4c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	202c      	movs	r0, #44	; 0x2c
 800271a:	fb00 f202 	mul.w	r2, r0, r2
 800271e:	440a      	add	r2, r1
 8002720:	3240      	adds	r2, #64	; 0x40
 8002722:	8812      	ldrh	r2, [r2, #0]
 8002724:	4413      	add	r3, r2
 8002726:	3b01      	subs	r3, #1
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	202c      	movs	r0, #44	; 0x2c
 800272e:	fb00 f202 	mul.w	r2, r0, r2
 8002732:	440a      	add	r2, r1
 8002734:	3240      	adds	r2, #64	; 0x40
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	fbb3 f3f2 	udiv	r3, r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80b5 	beq.w	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3355      	adds	r3, #85	; 0x55
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2d8      	uxtb	r0, r3
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3355      	adds	r3, #85	; 0x55
 800276e:	4602      	mov	r2, r0
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e09f      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3361      	adds	r3, #97	; 0x61
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d109      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e08b      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3361      	adds	r3, #97	; 0x61
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d109      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3360      	adds	r3, #96	; 0x60
 80027be:	2202      	movs	r2, #2
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e077      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3361      	adds	r3, #97	; 0x61
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d109      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3360      	adds	r3, #96	; 0x60
 80027e6:	2205      	movs	r2, #5
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e063      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	3361      	adds	r3, #97	; 0x61
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d009      	beq.n	8002814 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3361      	adds	r3, #97	; 0x61
 800280e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002810:	2b08      	cmp	r3, #8
 8002812:	d14f      	bne.n	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	335c      	adds	r3, #92	; 0x5c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	202c      	movs	r0, #44	; 0x2c
 800282c:	fb00 f303 	mul.w	r3, r0, r3
 8002830:	440b      	add	r3, r1
 8002832:	335c      	adds	r3, #92	; 0x5c
 8002834:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	335c      	adds	r3, #92	; 0x5c
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d912      	bls.n	8002870 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3360      	adds	r3, #96	; 0x60
 800286a:	2204      	movs	r2, #4
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e021      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3360      	adds	r3, #96	; 0x60
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002898:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	2302      	movs	r3, #2
 80028c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	b2d9      	uxtb	r1, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	202c      	movs	r0, #44	; 0x2c
 80028d0:	fb00 f303 	mul.w	r3, r0, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3360      	adds	r3, #96	; 0x60
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f003 fe73 	bl	80065c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b08a      	sub	sp, #40	; 0x28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	0c5b      	lsrs	r3, r3, #17
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800291e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d004      	beq.n	8002930 <HCD_RXQLVL_IRQHandler+0x46>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b05      	cmp	r3, #5
 800292a:	f000 80a9 	beq.w	8002a80 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800292e:	e0aa      	b.n	8002a86 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80a6 	beq.w	8002a84 <HCD_RXQLVL_IRQHandler+0x19a>
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3344      	adds	r3, #68	; 0x44
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 809b 	beq.w	8002a84 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3350      	adds	r3, #80	; 0x50
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	441a      	add	r2, r3
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	202c      	movs	r0, #44	; 0x2c
 8002968:	fb00 f303 	mul.w	r3, r0, r3
 800296c:	440b      	add	r3, r1
 800296e:	334c      	adds	r3, #76	; 0x4c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d87a      	bhi.n	8002a6c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3344      	adds	r3, #68	; 0x44
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	b292      	uxth	r2, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f001 fe92 	bl	80046b8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3344      	adds	r3, #68	; 0x44
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	441a      	add	r2, r3
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	202c      	movs	r0, #44	; 0x2c
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	440b      	add	r3, r1
 80029b4:	3344      	adds	r3, #68	; 0x44
 80029b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3350      	adds	r3, #80	; 0x50
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	441a      	add	r2, r3
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	202c      	movs	r0, #44	; 0x2c
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	440b      	add	r3, r1
 80029d8:	3350      	adds	r3, #80	; 0x50
 80029da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	0cdb      	lsrs	r3, r3, #19
 80029ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3340      	adds	r3, #64	; 0x40
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d13c      	bne.n	8002a84 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d039      	beq.n	8002a84 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a26:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a2e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3354      	adds	r3, #84	; 0x54
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3354      	adds	r3, #84	; 0x54
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]
      break;
 8002a6a:	e00b      	b.n	8002a84 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	701a      	strb	r2, [r3, #0]
      break;
 8002a7e:	e001      	b.n	8002a84 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002a84:	bf00      	nop
  }
}
 8002a86:	bf00      	nop
 8002a88:	3728      	adds	r7, #40	; 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002aba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d10b      	bne.n	8002ade <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f003 fd5d 	bl	8006590 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d132      	bne.n	8002b4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d126      	bne.n	8002b48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d113      	bne.n	8002b2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0c:	d106      	bne.n	8002b1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 ff3d 	bl	8004994 <USB_InitFSLSPClkSel>
 8002b1a:	e011      	b.n	8002b40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 ff36 	bl	8004994 <USB_InitFSLSPClkSel>
 8002b28:	e00a      	b.n	8002b40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d106      	bne.n	8002b40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f003 fd4f 	bl	80065e4 <HAL_HCD_PortEnabled_Callback>
 8002b46:	e002      	b.n	8002b4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f003 fd59 	bl	8006600 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d103      	bne.n	8002b60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f043 0320 	orr.w	r3, r3, #32
 8002b5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e12b      	b.n	8002dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fee8 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd8:	f001 fa20 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a81      	ldr	r2, [pc, #516]	; (8002de8 <HAL_I2C_Init+0x274>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d807      	bhi.n	8002bf8 <HAL_I2C_Init+0x84>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a80      	ldr	r2, [pc, #512]	; (8002dec <HAL_I2C_Init+0x278>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e006      	b.n	8002c06 <HAL_I2C_Init+0x92>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <HAL_I2C_Init+0x27c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf94      	ite	ls
 8002c00:	2301      	movls	r3, #1
 8002c02:	2300      	movhi	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0e7      	b.n	8002dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a78      	ldr	r2, [pc, #480]	; (8002df4 <HAL_I2C_Init+0x280>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0c9b      	lsrs	r3, r3, #18
 8002c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a6a      	ldr	r2, [pc, #424]	; (8002de8 <HAL_I2C_Init+0x274>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d802      	bhi.n	8002c48 <HAL_I2C_Init+0xd4>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3301      	adds	r3, #1
 8002c46:	e009      	b.n	8002c5c <HAL_I2C_Init+0xe8>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	4a69      	ldr	r2, [pc, #420]	; (8002df8 <HAL_I2C_Init+0x284>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	495c      	ldr	r1, [pc, #368]	; (8002de8 <HAL_I2C_Init+0x274>)
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	d819      	bhi.n	8002cb0 <HAL_I2C_Init+0x13c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e59      	subs	r1, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8a:	1c59      	adds	r1, r3, #1
 8002c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c90:	400b      	ands	r3, r1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_I2C_Init+0x138>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e59      	subs	r1, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002caa:	e051      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002cac:	2304      	movs	r3, #4
 8002cae:	e04f      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <HAL_I2C_Init+0x168>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1e58      	subs	r0, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e012      	b.n	8002d02 <HAL_I2C_Init+0x18e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Init+0x196>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e022      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10e      	bne.n	8002d30 <HAL_I2C_Init+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e58      	subs	r0, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	e00f      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	0099      	lsls	r1, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	6809      	ldr	r1, [r1, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6911      	ldr	r1, [r2, #16]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68d2      	ldr	r2, [r2, #12]
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	000186a0 	.word	0x000186a0
 8002dec:	001e847f 	.word	0x001e847f
 8002df0:	003d08ff 	.word	0x003d08ff
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	10624dd3 	.word	0x10624dd3

08002dfc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e128      	b.n	8003060 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a90      	ldr	r2, [pc, #576]	; (8003068 <HAL_I2S_Init+0x26c>)
 8002e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fd fde9 	bl	8000a00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e44:	f023 030f 	bic.w	r3, r3, #15
 8002e48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d060      	beq.n	8002f1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e62:	2310      	movs	r3, #16
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e001      	b.n	8002e6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d802      	bhi.n	8002e7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f001 f9c4 	bl	8004208 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8a:	d125      	bne.n	8002ed8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	3305      	adds	r3, #5
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e01f      	b.n	8002ef6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	3305      	adds	r3, #5
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e00e      	b.n	8002ef6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	3305      	adds	r3, #5
 8002ef4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4a5c      	ldr	r2, [pc, #368]	; (800306c <HAL_I2S_Init+0x270>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e003      	b.n	8002f24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d902      	bls.n	8002f30 <HAL_I2S_Init+0x134>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2bff      	cmp	r3, #255	; 0xff
 8002f2e:	d907      	bls.n	8002f40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e08f      	b.n	8003060 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	ea42 0103 	orr.w	r1, r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f5e:	f023 030f 	bic.w	r3, r3, #15
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6851      	ldr	r1, [r2, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6892      	ldr	r2, [r2, #8]
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6992      	ldr	r2, [r2, #24]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d161      	bne.n	8003050 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_I2S_Init+0x274>)
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a37      	ldr	r2, [pc, #220]	; (8003074 <HAL_I2S_Init+0x278>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2S_Init+0x1a4>
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_I2S_Init+0x27c>)
 8002f9e:	e001      	b.n	8002fa4 <HAL_I2S_Init+0x1a8>
 8002fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4932      	ldr	r1, [pc, #200]	; (8003074 <HAL_I2S_Init+0x278>)
 8002fac:	428a      	cmp	r2, r1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2S_Init+0x1b8>
 8002fb0:	4a31      	ldr	r2, [pc, #196]	; (8003078 <HAL_I2S_Init+0x27c>)
 8002fb2:	e001      	b.n	8002fb8 <HAL_I2S_Init+0x1bc>
 8002fb4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002fb8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fbc:	f023 030f 	bic.w	r3, r3, #15
 8002fc0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <HAL_I2S_Init+0x278>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <HAL_I2S_Init+0x1d4>
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_I2S_Init+0x27c>)
 8002fce:	e001      	b.n	8002fd4 <HAL_I2S_Init+0x1d8>
 8002fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a25      	ldr	r2, [pc, #148]	; (8003074 <HAL_I2S_Init+0x278>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2S_Init+0x1ea>
 8002fe2:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_I2S_Init+0x27c>)
 8002fe4:	e001      	b.n	8002fea <HAL_I2S_Init+0x1ee>
 8002fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff6:	d003      	beq.n	8003000 <HAL_I2S_Init+0x204>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e001      	b.n	800300c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003016:	4313      	orrs	r3, r2
 8003018:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003020:	4313      	orrs	r3, r2
 8003022:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800302a:	4313      	orrs	r3, r2
 800302c:	b29a      	uxth	r2, r3
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	4313      	orrs	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003038:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_I2S_Init+0x278>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_I2S_Init+0x24c>
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_I2S_Init+0x27c>)
 8003046:	e001      	b.n	800304c <HAL_I2S_Init+0x250>
 8003048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800304c:	897a      	ldrh	r2, [r7, #10]
 800304e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	08003173 	.word	0x08003173
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	08003289 	.word	0x08003289
 8003074:	40003800 	.word	0x40003800
 8003078:	40003400 	.word	0x40003400

0800307c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	881a      	ldrh	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10e      	bne.n	800310c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffb8 	bl	800307c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	b292      	uxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	1c9a      	adds	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10e      	bne.n	800316a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800315a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff93 	bl	8003090 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b04      	cmp	r3, #4
 800318c:	d13a      	bne.n	8003204 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d109      	bne.n	80031ac <I2S_IRQHandler+0x3a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d102      	bne.n	80031ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffb4 	bl	8003114 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d126      	bne.n	8003204 <I2S_IRQHandler+0x92>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d11f      	bne.n	8003204 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ff50 	bl	80030a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b03      	cmp	r3, #3
 800320e:	d136      	bne.n	800327e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d109      	bne.n	800322e <I2S_IRQHandler+0xbc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d102      	bne.n	800322e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff45 	bl	80030b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d122      	bne.n	800327e <I2S_IRQHandler+0x10c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d11b      	bne.n	800327e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003254:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	f043 0204 	orr.w	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff13 	bl	80030a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a92      	ldr	r2, [pc, #584]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80032a2:	4b92      	ldr	r3, [pc, #584]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032a4:	e001      	b.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80032a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a8b      	ldr	r2, [pc, #556]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80032c0:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032c2:	e001      	b.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80032c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d4:	d004      	beq.n	80032e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8099 	bne.w	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d107      	bne.n	80032fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f925 	bl	8003544 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f9c8 	bl	80036a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d13a      	bne.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d035      	beq.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003332:	4b6e      	ldr	r3, [pc, #440]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003334:	e001      	b.n	800333a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4969      	ldr	r1, [pc, #420]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003342:	428b      	cmp	r3, r1
 8003344:	d101      	bne.n	800334a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003346:	4b69      	ldr	r3, [pc, #420]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003348:	e001      	b.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800334a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003352:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003362:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fe88 	bl	80030a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b08      	cmp	r3, #8
 800339c:	f040 80c3 	bne.w	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80bd 	beq.w	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a49      	ldr	r2, [pc, #292]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80033c6:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033c8:	e001      	b.n	80033ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80033ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4944      	ldr	r1, [pc, #272]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033d6:	428b      	cmp	r3, r1
 80033d8:	d101      	bne.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80033da:	4b44      	ldr	r3, [pc, #272]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033dc:	e001      	b.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80033de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fe4a 	bl	80030a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003410:	e089      	b.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d107      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8be 	bl	80035a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f8fd 	bl	8003640 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d12f      	bne.n	80034b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02a      	beq.n	80034b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003468:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003476:	e001      	b.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4919      	ldr	r1, [pc, #100]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003484:	428b      	cmp	r3, r1
 8003486:	d101      	bne.n	800348c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800348a:	e001      	b.n	8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800348c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003494:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f043 0202 	orr.w	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fdfa 	bl	80030a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d136      	bne.n	8003528 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d0:	e001      	b.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80034d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4902      	ldr	r1, [pc, #8]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034de:	428b      	cmp	r3, r1
 80034e0:	d106      	bne.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80034e2:	4b02      	ldr	r3, [pc, #8]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e4:	e006      	b.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80034e6:	bf00      	nop
 80034e8:	40003800 	.word	0x40003800
 80034ec:	40003400 	.word	0x40003400
 80034f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003508:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fdc0 	bl	80030a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003524:	e000      	b.n	8003528 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003526:	bf00      	nop
}
 8003528:	bf00      	nop
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c99      	adds	r1, r3, #2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6251      	str	r1, [r2, #36]	; 0x24
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003584:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d106      	bne.n	800359e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ffc9 	bl	8003530 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c99      	adds	r1, r3, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6251      	str	r1, [r2, #36]	; 0x24
 80035ba:	8819      	ldrh	r1, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <I2SEx_TxISR_I2SExt+0x90>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <I2SEx_TxISR_I2SExt+0x22>
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <I2SEx_TxISR_I2SExt+0x94>)
 80035c8:	e001      	b.n	80035ce <I2SEx_TxISR_I2SExt+0x26>
 80035ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ce:	460a      	mov	r2, r1
 80035d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d121      	bne.n	800362e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <I2SEx_TxISR_I2SExt+0x90>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <I2SEx_TxISR_I2SExt+0x50>
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <I2SEx_TxISR_I2SExt+0x94>)
 80035f6:	e001      	b.n	80035fc <I2SEx_TxISR_I2SExt+0x54>
 80035f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	490d      	ldr	r1, [pc, #52]	; (8003638 <I2SEx_TxISR_I2SExt+0x90>)
 8003604:	428b      	cmp	r3, r1
 8003606:	d101      	bne.n	800360c <I2SEx_TxISR_I2SExt+0x64>
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <I2SEx_TxISR_I2SExt+0x94>)
 800360a:	e001      	b.n	8003610 <I2SEx_TxISR_I2SExt+0x68>
 800360c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003614:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff81 	bl	8003530 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40003800 	.word	0x40003800
 800363c:	40003400 	.word	0x40003400

08003640 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68d8      	ldr	r0, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	1c99      	adds	r1, r3, #2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003658:	b282      	uxth	r2, r0
 800365a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d113      	bne.n	800369c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003682:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff4a 	bl	8003530 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <I2SEx_RxISR_I2SExt+0x90>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <I2SEx_RxISR_I2SExt+0x16>
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <I2SEx_RxISR_I2SExt+0x94>)
 80036b8:	e001      	b.n	80036be <I2SEx_RxISR_I2SExt+0x1a>
 80036ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036be:	68d8      	ldr	r0, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	1c99      	adds	r1, r3, #2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036ca:	b282      	uxth	r2, r0
 80036cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d121      	bne.n	800372a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <I2SEx_RxISR_I2SExt+0x90>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d101      	bne.n	80036f4 <I2SEx_RxISR_I2SExt+0x50>
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <I2SEx_RxISR_I2SExt+0x94>)
 80036f2:	e001      	b.n	80036f8 <I2SEx_RxISR_I2SExt+0x54>
 80036f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	490d      	ldr	r1, [pc, #52]	; (8003734 <I2SEx_RxISR_I2SExt+0x90>)
 8003700:	428b      	cmp	r3, r1
 8003702:	d101      	bne.n	8003708 <I2SEx_RxISR_I2SExt+0x64>
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <I2SEx_RxISR_I2SExt+0x94>)
 8003706:	e001      	b.n	800370c <I2SEx_RxISR_I2SExt+0x68>
 8003708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003710:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff03 	bl	8003530 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40003800 	.word	0x40003800
 8003738:	40003400 	.word	0x40003400

0800373c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e267      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d075      	beq.n	8003846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003766:	4b85      	ldr	r3, [pc, #532]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d112      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05b      	beq.n	8003844 <HAL_RCC_OscConfig+0x108>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d157      	bne.n	8003844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e242      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x74>
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6f      	ldr	r2, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6c      	ldr	r2, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037d4:	4b69      	ldr	r3, [pc, #420]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a68      	ldr	r2, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fad8 	bl	8000da8 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fad4 	bl	8000da8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e207      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xc0>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd fac4 	bl	8000da8 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003824:	f7fd fac0 	bl	8000da8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1f3      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0xe8>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1c7      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fa79 	bl	8000da8 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd fa75 	bl	8000da8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1a8      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4925      	ldr	r1, [pc, #148]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fa58 	bl	8000da8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fd fa54 	bl	8000da8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e187      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d036      	beq.n	8003994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fa38 	bl	8000da8 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393c:	f7fd fa34 	bl	8000da8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e167      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x200>
 800395a:	e01b      	b.n	8003994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7fd fa21 	bl	8000da8 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	e00e      	b.n	8003988 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396a:	f7fd fa1d 	bl	8000da8 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d907      	bls.n	8003988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e150      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	42470000 	.word	0x42470000
 8003984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 800398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ea      	bne.n	800396a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8097 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b7d      	ldr	r3, [pc, #500]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a73      	ldr	r2, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fd f9dd 	bl	8000da8 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd f9d9 	bl	8000da8 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e10c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2ea>
 8003a18:	4b64      	ldr	r3, [pc, #400]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a63      	ldr	r2, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e01c      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x30c>
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a5e      	ldr	r2, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5b      	ldr	r2, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 0304 	bic.w	r3, r3, #4
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fd f99e 	bl	8000da8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fd f99a 	bl	8000da8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0cb      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ee      	beq.n	8003a70 <HAL_RCC_OscConfig+0x334>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fd f988 	bl	8000da8 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd f984 	bl	8000da8 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0b5      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ee      	bne.n	8003a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a38      	ldr	r2, [pc, #224]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a1 	beq.w	8003c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d05c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d141      	bne.n	8003b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd f958 	bl	8000da8 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd f954 	bl	8000da8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e087      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fd f92d 	bl	8000da8 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fd f929 	bl	8000da8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e05c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x416>
 8003b70:	e054      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fd f916 	bl	8000da8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd f912 	bl	8000da8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e045      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x444>
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e038      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d028      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d121      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11a      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cc      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d90c      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e067      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7fd f844 	bl	8000da8 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7fd f840 	bl	8000da8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 f821 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc ffa4 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	08006c04 	.word	0x08006c04
 8003df0:	20000000 	.word	0x20000000
 8003df4:	20000004 	.word	0x20000004

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b094      	sub	sp, #80	; 0x50
 8003dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
 8003e04:	2300      	movs	r3, #0
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e08:	2300      	movs	r3, #0
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e10:	4b79      	ldr	r3, [pc, #484]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d00d      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x40>
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	f200 80e1 	bhi.w	8003fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e2a:	e0db      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e30:	e0db      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e32:	4b73      	ldr	r3, [pc, #460]	; (8004000 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e36:	e0d8      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2200      	movs	r2, #0
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	f04f 0000 	mov.w	r0, #0
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	0159      	lsls	r1, r3, #5
 8003e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e7c:	0150      	lsls	r0, r2, #5
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4621      	mov	r1, r4
 8003e84:	1a51      	subs	r1, r2, r1
 8003e86:	6139      	str	r1, [r7, #16]
 8003e88:	4629      	mov	r1, r5
 8003e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	018b      	lsls	r3, r1, #6
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	018a      	lsls	r2, r1, #6
 8003eaa:	4651      	mov	r1, sl
 8003eac:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eca:	4690      	mov	r8, r2
 8003ecc:	4699      	mov	r9, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	eb18 0303 	adds.w	r3, r8, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	eb49 0303 	adc.w	r3, r9, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eea:	4629      	mov	r1, r5
 8003eec:	024b      	lsls	r3, r1, #9
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	024a      	lsls	r2, r1, #9
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f08:	f7fc f95e 	bl	80001c8 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	e058      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	4611      	mov	r1, r2
 8003f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	0159      	lsls	r1, r3, #5
 8003f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f42:	0150      	lsls	r0, r2, #5
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4641      	mov	r1, r8
 8003f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f68:	ebb2 040a 	subs.w	r4, r2, sl
 8003f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	00eb      	lsls	r3, r5, #3
 8003f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7e:	00e2      	lsls	r2, r4, #3
 8003f80:	4614      	mov	r4, r2
 8003f82:	461d      	mov	r5, r3
 8003f84:	4643      	mov	r3, r8
 8003f86:	18e3      	adds	r3, r4, r3
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	eb45 0303 	adc.w	r3, r5, r3
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	028b      	lsls	r3, r1, #10
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa8:	4621      	mov	r1, r4
 8003faa:	028a      	lsls	r2, r1, #10
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	61fa      	str	r2, [r7, #28]
 8003fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fbc:	f7fc f904 	bl	80001c8 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe2:	e002      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3750      	adds	r7, #80	; 0x50
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	007a1200 	.word	0x007a1200

08004004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_GetHCLKFreq+0x14>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000000 	.word	0x20000000

0800401c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004020:	f7ff fff0 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0a9b      	lsrs	r3, r3, #10
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4903      	ldr	r1, [pc, #12]	; (8004040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40023800 	.word	0x40023800
 8004040:	08006c14 	.word	0x08006c14

08004044 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004068:	2b00      	cmp	r3, #0
 800406a:	d035      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800406c:	4b62      	ldr	r3, [pc, #392]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004072:	f7fc fe99 	bl	8000da8 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800407a:	f7fc fe95 	bl	8000da8 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0b0      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800408c:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	019a      	lsls	r2, r3, #6
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	071b      	lsls	r3, r3, #28
 80040a4:	4955      	ldr	r1, [pc, #340]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040ac:	4b52      	ldr	r3, [pc, #328]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040b2:	f7fc fe79 	bl	8000da8 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ba:	f7fc fe75 	bl	8000da8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e090      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8083 	beq.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a43      	ldr	r2, [pc, #268]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004102:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800410e:	f7fc fe4b 	bl	8000da8 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fc fe47 	bl	8000da8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e062      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004134:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004162:	4b28      	ldr	r3, [pc, #160]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d114      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800417a:	f7fc fe15 	bl	8000da8 <HAL_GetTick>
 800417e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fc fe11 	bl	8000da8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e02a      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004198:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ee      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b0:	d10d      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	490d      	ldr	r1, [pc, #52]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]
 80041cc:	e005      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041d8:	6093      	str	r3, [r2, #8]
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e6:	4905      	ldr	r1, [pc, #20]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	42470068 	.word	0x42470068
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	42470e40 	.word	0x42470e40

08004208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d13e      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d12f      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800423e:	617b      	str	r3, [r7, #20]
          break;
 8004240:	e02f      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d108      	bne.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e007      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428c:	0f1b      	lsrs	r3, r3, #28
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
          break;
 800429a:	e002      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
          break;
 80042a0:	bf00      	nop
        }
      }
      break;
 80042a2:	bf00      	nop
    }
  }
  return frequency;
 80042a4:	697b      	ldr	r3, [r7, #20]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	00bb8000 	.word	0x00bb8000
 80042bc:	007a1200 	.word	0x007a1200
 80042c0:	00f42400 	.word	0x00f42400

080042c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07b      	b.n	80043ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d009      	beq.n	80042fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	61da      	str	r2, [r3, #28]
 80042ee:	e005      	b.n	80042fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fbf2 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	ea42 0103 	orr.w	r1, r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0104 	and.w	r1, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0210 	and.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d6:	b084      	sub	sp, #16
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	f107 001c 	add.w	r0, r7, #28
 80043e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d122      	bne.n	8004434 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f9bf 	bl	80047ac <USB_CoreReset>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	e01a      	b.n	800446a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f9b3 	bl	80047ac <USB_CoreReset>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
 800445c:	e005      	b.n	800446a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b01      	cmp	r3, #1
 800446e:	d10b      	bne.n	8004488 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f043 0206 	orr.w	r2, r3, #6
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004494:	b004      	add	sp, #16
 8004496:	4770      	bx	lr

08004498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d115      	bne.n	800452a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800450a:	2001      	movs	r0, #1
 800450c:	f7fc fc58 	bl	8000dc0 <HAL_Delay>
      ms++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f939 	bl	800478e <USB_GetMode>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d01e      	beq.n	8004560 <USB_SetCurrentMode+0x84>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b31      	cmp	r3, #49	; 0x31
 8004526:	d9f0      	bls.n	800450a <USB_SetCurrentMode+0x2e>
 8004528:	e01a      	b.n	8004560 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d115      	bne.n	800455c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800453c:	2001      	movs	r0, #1
 800453e:	f7fc fc3f 	bl	8000dc0 <HAL_Delay>
      ms++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f920 	bl	800478e <USB_GetMode>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <USB_SetCurrentMode+0x84>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b31      	cmp	r3, #49	; 0x31
 8004558:	d9f0      	bls.n	800453c <USB_SetCurrentMode+0x60>
 800455a:	e001      	b.n	8004560 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e005      	b.n	800456c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b32      	cmp	r3, #50	; 0x32
 8004564:	d101      	bne.n	800456a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <USB_FlushTxFifo+0x64>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e01b      	b.n	80045cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	daf2      	bge.n	8004582 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3301      	adds	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <USB_FlushTxFifo+0x64>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e006      	b.n	80045cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d0f0      	beq.n	80045ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	00030d40 	.word	0x00030d40

080045dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <USB_FlushRxFifo+0x5c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e018      	b.n	800462c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	daf2      	bge.n	80045e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2210      	movs	r2, #16
 800460a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3301      	adds	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <USB_FlushRxFifo+0x5c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e006      	b.n	800462c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b10      	cmp	r3, #16
 8004628:	d0f0      	beq.n	800460c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	00030d40 	.word	0x00030d40

0800463c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4611      	mov	r1, r2
 8004648:	461a      	mov	r2, r3
 800464a:	460b      	mov	r3, r1
 800464c:	71fb      	strb	r3, [r7, #7]
 800464e:	4613      	mov	r3, r2
 8004650:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800465a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d123      	bne.n	80046aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004662:	88bb      	ldrh	r3, [r7, #4]
 8004664:	3303      	adds	r3, #3
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e018      	b.n	80046a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	031a      	lsls	r2, r3, #12
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467c:	461a      	mov	r2, r3
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3301      	adds	r3, #1
 800468e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	3301      	adds	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3301      	adds	r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	3301      	adds	r3, #1
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d3e2      	bcc.n	8004670 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3724      	adds	r7, #36	; 0x24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b08b      	sub	sp, #44	; 0x2c
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	e014      	b.n	800470e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	3301      	adds	r3, #1
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	3301      	adds	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	3301      	adds	r3, #1
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	3301      	adds	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	3301      	adds	r3, #1
 800470c:	623b      	str	r3, [r7, #32]
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	429a      	cmp	r2, r3
 8004714:	d3e6      	bcc.n	80046e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004716:	8bfb      	ldrh	r3, [r7, #30]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	461a      	mov	r2, r3
 8004728:	f107 0310 	add.w	r3, r7, #16
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
 800473c:	b2da      	uxtb	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	701a      	strb	r2, [r3, #0]
      i++;
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	3301      	adds	r3, #1
 8004746:	623b      	str	r3, [r7, #32]
      pDest++;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	3301      	adds	r3, #1
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800474e:	8bfb      	ldrh	r3, [r7, #30]
 8004750:	3b01      	subs	r3, #1
 8004752:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004754:	8bfb      	ldrh	r3, [r7, #30]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ea      	bne.n	8004730 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800475c:	4618      	mov	r0, r3
 800475e:	372c      	adds	r7, #44	; 0x2c
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004780:	68fb      	ldr	r3, [r7, #12]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0301 	and.w	r3, r3, #1
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a13      	ldr	r2, [pc, #76]	; (8004810 <USB_CoreReset+0x64>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e01b      	b.n	8004802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	daf2      	bge.n	80047b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <USB_CoreReset+0x64>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d0f0      	beq.n	80047e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	00030d40 	.word	0x00030d40

08004814 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004814:	b084      	sub	sp, #16
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d10a      	bne.n	8004886 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e014      	b.n	80048b0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e009      	b.n	80048b0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048b0:	2110      	movs	r1, #16
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff fe5e 	bl	8004574 <USB_FlushTxFifo>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fe8a 	bl	80045dc <USB_FlushRxFifo>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	e015      	b.n	8004904 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3301      	adds	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	429a      	cmp	r2, r3
 800490a:	d3e5      	bcc.n	80048d8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004918:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a13      	ldr	r2, [pc, #76]	; (8004980 <USB_HostInit+0x16c>)
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <USB_HostInit+0x170>)
 8004938:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800493c:	e009      	b.n	8004952 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <USB_HostInit+0x174>)
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a0f      	ldr	r2, [pc, #60]	; (800498c <USB_HostInit+0x178>)
 800494e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f043 0210 	orr.w	r2, r3, #16
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <USB_HostInit+0x17c>)
 800496a:	4313      	orrs	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800497c:	b004      	add	sp, #16
 800497e:	4770      	bx	lr
 8004980:	01000200 	.word	0x01000200
 8004984:	00e00300 	.word	0x00e00300
 8004988:	00600080 	.word	0x00600080
 800498c:	004000e0 	.word	0x004000e0
 8004990:	a3200008 	.word	0xa3200008

08004994 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049dc:	461a      	mov	r2, r3
 80049de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049e2:	6053      	str	r3, [r2, #4]
 80049e4:	e009      	b.n	80049fa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d106      	bne.n	80049fa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f2:	461a      	mov	r2, r3
 80049f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80049f8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <USB_DriveVbus+0x44>
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d106      	bne.n	8004a4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d109      	bne.n	8004a6c <USB_DriveVbus+0x64>
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	0c5b      	lsrs	r3, r3, #17
 8004a98:	f003 0303 	and.w	r3, r3, #3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	b29b      	uxth	r3, r3
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	70fb      	strb	r3, [r7, #3]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	70bb      	strb	r3, [r7, #2]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d87e      	bhi.n	8004c08 <USB_HC_Init+0x13c>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <USB_HC_Init+0x44>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004bcb 	.word	0x08004bcb
 8004b18:	08004b21 	.word	0x08004b21
 8004b1c:	08004b8d 	.word	0x08004b8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004b34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da10      	bge.n	8004b5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004b5c:	e057      	b.n	8004c0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d051      	beq.n	8004c0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b88:	60d3      	str	r3, [r2, #12]
      break;
 8004b8a:	e040      	b.n	8004c0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004b9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	da34      	bge.n	8004c12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004bc8:	e023      	b.n	8004c12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f240 2325 	movw	r3, #549	; 0x225
 8004bdc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004bde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da17      	bge.n	8004c16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c06:	e006      	b.n	8004c16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	77fb      	strb	r3, [r7, #31]
      break;
 8004c0c:	e004      	b.n	8004c18 <USB_HC_Init+0x14c>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e002      	b.n	8004c18 <USB_HC_Init+0x14c>
      break;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <USB_HC_Init+0x14c>
      break;
 8004c16:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c32:	f043 0302 	orr.w	r3, r3, #2
 8004c36:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	2101      	movs	r1, #1
 8004c48:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4c:	6939      	ldr	r1, [r7, #16]
 8004c4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c52:	4313      	orrs	r3, r2
 8004c54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004c62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da03      	bge.n	8004c72 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e001      	b.n	8004c76 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff feff 	bl	8004a7a <USB_GetHostSpeed>
 8004c7c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d106      	bne.n	8004c94 <USB_HC_Init+0x1c8>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d003      	beq.n	8004c94 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e001      	b.n	8004c98 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c98:	787b      	ldrb	r3, [r7, #1]
 8004c9a:	059b      	lsls	r3, r3, #22
 8004c9c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ca0:	78bb      	ldrb	r3, [r7, #2]
 8004ca2:	02db      	lsls	r3, r3, #11
 8004ca4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ca8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004caa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cae:	049b      	lsls	r3, r3, #18
 8004cb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004cb4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	0159      	lsls	r1, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	440b      	add	r3, r1
 8004cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cd4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d003      	beq.n	8004ce6 <USB_HC_Init+0x21a>
 8004cde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10f      	bne.n	8004d06 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08c      	sub	sp, #48	; 0x30
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d2c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02d      	beq.n	8004d96 <USB_HC_StartXfer+0x86>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d129      	bne.n	8004d96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d117      	bne.n	8004d78 <USB_HC_StartXfer+0x68>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	79db      	ldrb	r3, [r3, #7]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <USB_HC_StartXfer+0x48>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	79db      	ldrb	r3, [r3, #7]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d10f      	bne.n	8004d78 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	6a3a      	ldr	r2, [r7, #32]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <USB_HC_StartXfer+0x86>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	795b      	ldrb	r3, [r3, #5]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d107      	bne.n	8004d96 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fa0f 	bl	80051b0 <USB_DoPing>
      return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e0f8      	b.n	8004f88 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	8912      	ldrh	r2, [r2, #8]
 8004da6:	4413      	add	r3, r2
 8004da8:	3b01      	subs	r3, #1
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	8912      	ldrh	r2, [r2, #8]
 8004dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004db4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004db6:	8b7b      	ldrh	r3, [r7, #26]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d90b      	bls.n	8004dd4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004dbc:	8b7b      	ldrh	r3, [r7, #26]
 8004dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004dc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	8912      	ldrh	r2, [r2, #8]
 8004dc6:	fb03 f202 	mul.w	r2, r3, r2
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	e001      	b.n	8004dd4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	8912      	ldrh	r2, [r2, #8]
 8004de2:	fb03 f202 	mul.w	r2, r3, r2
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	611a      	str	r2, [r3, #16]
 8004dea:	e003      	b.n	8004df4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dfe:	04d9      	lsls	r1, r3, #19
 8004e00:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <USB_HC_StartXfer+0x280>)
 8004e02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	7a9b      	ldrb	r3, [r3, #10]
 8004e0a:	075b      	lsls	r3, r3, #29
 8004e0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	0148      	lsls	r0, r1, #5
 8004e14:	6a39      	ldr	r1, [r7, #32]
 8004e16:	4401      	add	r1, r0
 8004e18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	68d9      	ldr	r1, [r3, #12]
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	460a      	mov	r2, r1
 8004e38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	7e7b      	ldrb	r3, [r7, #25]
 8004e82:	075b      	lsls	r3, r3, #29
 8004e84:	69f9      	ldr	r1, [r7, #28]
 8004e86:	0148      	lsls	r0, r1, #5
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	4401      	add	r1, r0
 8004e8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eaa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	78db      	ldrb	r3, [r3, #3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e003      	b.n	8004ec6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ec4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ecc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	461a      	mov	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e04e      	b.n	8004f88 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d149      	bne.n	8004f86 <USB_HC_StartXfer+0x276>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d045      	beq.n	8004f86 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	79db      	ldrb	r3, [r3, #7]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d830      	bhi.n	8004f64 <USB_HC_StartXfer+0x254>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <USB_HC_StartXfer+0x1f8>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f3d 	.word	0x08004f3d
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004f3d 	.word	0x08004f3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f22:	8afa      	ldrh	r2, [r7, #22]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d91c      	bls.n	8004f68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]
        }
        break;
 8004f3a:	e015      	b.n	8004f68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	3303      	adds	r3, #3
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004f46:	8afa      	ldrh	r2, [r7, #22]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90a      	bls.n	8004f6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	619a      	str	r2, [r3, #24]
        }
        break;
 8004f62:	e003      	b.n	8004f6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004f64:	bf00      	nop
 8004f66:	e002      	b.n	8004f6e <USB_HC_StartXfer+0x25e>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <USB_HC_StartXfer+0x25e>
        break;
 8004f6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68d9      	ldr	r1, [r3, #12]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	785a      	ldrb	r2, [r3, #1]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fb5b 	bl	800463c <USB_WritePacket>
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	1ff80000 	.word	0x1ff80000

08004f94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	b29b      	uxth	r3, r3
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b089      	sub	sp, #36	; 0x24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0c9b      	lsrs	r3, r3, #18
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	0fdb      	lsrs	r3, r3, #31
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b20      	cmp	r3, #32
 8005004:	d104      	bne.n	8005010 <USB_HC_Halt+0x5a>
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e0c8      	b.n	80051a2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <USB_HC_Halt+0x66>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d163      	bne.n	80050e4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	440a      	add	r2, r1
 8005032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800503a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	f040 80ab 	bne.w	80051a0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d133      	bne.n	80050be <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	440a      	add	r2, r1
 800506c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005074:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	440a      	add	r2, r1
 800508c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005094:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a2:	d81d      	bhi.n	80050e0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ba:	d0ec      	beq.n	8005096 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80050bc:	e070      	b.n	80051a0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80050de:	e05f      	b.n	80051a0 <USB_HC_Halt+0x1ea>
            break;
 80050e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80050e2:	e05d      	b.n	80051a0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005102:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d133      	bne.n	800517c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	440a      	add	r2, r1
 800512a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005132:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005152:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005160:	d81d      	bhi.n	800519e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005178:	d0ec      	beq.n	8005154 <USB_HC_Halt+0x19e>
 800517a:	e011      	b.n	80051a0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	440a      	add	r2, r1
 8005192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	e000      	b.n	80051a0 <USB_HC_Halt+0x1ea>
          break;
 800519e:	bf00      	nop
    }
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3724      	adds	r7, #36	; 0x24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80051c4:	2301      	movs	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	04da      	lsls	r2, r3, #19
 80051cc:	4b15      	ldr	r3, [pc, #84]	; (8005224 <USB_DoPing+0x74>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005200:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	461a      	mov	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	1ff80000 	.word	0x1ff80000

08005228 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff f93c 	bl	80044ba <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005242:	2110      	movs	r1, #16
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff f995 	bl	8004574 <USB_FlushTxFifo>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff f9c1 	bl	80045dc <USB_FlushRxFifo>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e01f      	b.n	80052aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005280:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005288:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005290:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	461a      	mov	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	3301      	adds	r3, #1
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b0f      	cmp	r3, #15
 80052ae:	d9dc      	bls.n	800526a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e034      	b.n	8005320 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	461a      	mov	r2, r3
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fc:	d80c      	bhi.n	8005318 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005314:	d0ec      	beq.n	80052f0 <USB_StopHost+0xc8>
 8005316:	e000      	b.n	800531a <USB_StopHost+0xf2>
        break;
 8005318:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	3301      	adds	r3, #1
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0f      	cmp	r3, #15
 8005324:	d9c7      	bls.n	80052b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532c:	461a      	mov	r2, r3
 800532e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005332:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800533a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff f8ab 	bl	8004498 <USB_EnableGlobalInt>

  return ret;
 8005342:	7ffb      	ldrb	r3, [r7, #31]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af04      	add	r7, sp, #16
 8005352:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005354:	2301      	movs	r3, #1
 8005356:	2202      	movs	r2, #2
 8005358:	2102      	movs	r1, #2
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fc66 	bl	8005c2c <USBH_FindInterface>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2bff      	cmp	r3, #255	; 0xff
 8005368:	d002      	beq.n	8005370 <USBH_CDC_InterfaceInit+0x24>
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d901      	bls.n	8005374 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005370:	2302      	movs	r3, #2
 8005372:	e13d      	b.n	80055f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fc3b 	bl	8005bf4 <USBH_SelectInterface>
 800537e:	4603      	mov	r3, r0
 8005380:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005382:	7bbb      	ldrb	r3, [r7, #14]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005388:	2302      	movs	r3, #2
 800538a:	e131      	b.n	80055f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005392:	2050      	movs	r0, #80	; 0x50
 8005394:	f001 fb12 	bl	80069bc <malloc>
 8005398:	4603      	mov	r3, r0
 800539a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80053ac:	2302      	movs	r3, #2
 80053ae:	e11f      	b.n	80055f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80053b0:	2250      	movs	r2, #80	; 0x50
 80053b2:	2100      	movs	r1, #0
 80053b4:	68b8      	ldr	r0, [r7, #8]
 80053b6:	f001 fb11 	bl	80069dc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	211a      	movs	r1, #26
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da15      	bge.n	80053fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	211a      	movs	r1, #26
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	211a      	movs	r1, #26
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 ff9c 	bl	8006342 <USBH_AllocPipe>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	7858      	ldrb	r0, [r3, #1]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	8952      	ldrh	r2, [r2, #10]
 800542a:	9202      	str	r2, [sp, #8]
 800542c:	2203      	movs	r2, #3
 800542e:	9201      	str	r2, [sp, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4623      	mov	r3, r4
 8005434:	4602      	mov	r2, r0
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 ff54 	bl	80062e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 fa17 	bl	8006878 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800544a:	2300      	movs	r3, #0
 800544c:	2200      	movs	r2, #0
 800544e:	210a      	movs	r1, #10
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fbeb 	bl	8005c2c <USBH_FindInterface>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2bff      	cmp	r3, #255	; 0xff
 800545e:	d002      	beq.n	8005466 <USBH_CDC_InterfaceInit+0x11a>
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d901      	bls.n	800546a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005466:	2302      	movs	r3, #2
 8005468:	e0c2      	b.n	80055f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	211a      	movs	r1, #26
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	4413      	add	r3, r2
 8005476:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b25b      	sxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	da16      	bge.n	80054b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	211a      	movs	r1, #26
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	4413      	add	r3, r2
 800548e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	211a      	movs	r1, #26
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	835a      	strh	r2, [r3, #26]
 80054ae:	e015      	b.n	80054dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	211a      	movs	r1, #26
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	211a      	movs	r1, #26
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054d6:	881a      	ldrh	r2, [r3, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	211a      	movs	r1, #26
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da16      	bge.n	8005522 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	211a      	movs	r1, #26
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	211a      	movs	r1, #26
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	4413      	add	r3, r2
 8005516:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	835a      	strh	r2, [r3, #26]
 8005520:	e015      	b.n	800554e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	211a      	movs	r1, #26
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	4413      	add	r3, r2
 800552e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	211a      	movs	r1, #26
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	4413      	add	r3, r2
 8005544:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	7b9b      	ldrb	r3, [r3, #14]
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fef4 	bl	8006342 <USBH_AllocPipe>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	7bdb      	ldrb	r3, [r3, #15]
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 feea 	bl	8006342 <USBH_AllocPipe>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	7b59      	ldrb	r1, [r3, #13]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	7b98      	ldrb	r0, [r3, #14]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	8b12      	ldrh	r2, [r2, #24]
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	2202      	movs	r2, #2
 8005592:	9201      	str	r2, [sp, #4]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4623      	mov	r3, r4
 8005598:	4602      	mov	r2, r0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fea2 	bl	80062e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	7b19      	ldrb	r1, [r3, #12]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	7bd8      	ldrb	r0, [r3, #15]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	8b52      	ldrh	r2, [r2, #26]
 80055b8:	9202      	str	r2, [sp, #8]
 80055ba:	2202      	movs	r2, #2
 80055bc:	9201      	str	r2, [sp, #4]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4623      	mov	r3, r4
 80055c2:	4602      	mov	r2, r0
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fe8d 	bl	80062e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	7b5b      	ldrb	r3, [r3, #13]
 80055d6:	2200      	movs	r2, #0
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f94c 	bl	8006878 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	7b1b      	ldrb	r3, [r3, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 f945 	bl	8006878 <USBH_LL_SetToggle>

  return USBH_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}

080055f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00e      	beq.n	8005630 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fe82 	bl	8006322 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fead 	bl	8006384 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	7b1b      	ldrb	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00e      	beq.n	8005656 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	7b1b      	ldrb	r3, [r3, #12]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fe6f 	bl	8006322 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	7b1b      	ldrb	r3, [r3, #12]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fe9a 	bl	8006384 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	7b5b      	ldrb	r3, [r3, #13]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	7b5b      	ldrb	r3, [r3, #13]
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fe5c 	bl	8006322 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	7b5b      	ldrb	r3, [r3, #13]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fe87 	bl	8006384 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f99b 	bl	80069cc <free>
    phost->pActiveClass->pData = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800569c:	2200      	movs	r2, #0
 800569e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3340      	adds	r3, #64	; 0x40
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8b1 	bl	800582a <GetLineCoding>
 80056c8:	4603      	mov	r3, r0
 80056ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80056d8:	2102      	movs	r1, #2
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80056de:	7afb      	ldrb	r3, [r7, #11]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005708:	2b04      	cmp	r3, #4
 800570a:	d877      	bhi.n	80057fc <USBH_CDC_Process+0x114>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <USBH_CDC_Process+0x2c>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005729 	.word	0x08005729
 8005718:	0800572f 	.word	0x0800572f
 800571c:	0800575f 	.word	0x0800575f
 8005720:	080057d3 	.word	0x080057d3
 8005724:	080057e1 	.word	0x080057e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e06d      	b.n	800580a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f897 	bl	8005868 <SetLineCoding>
 800573a:	4603      	mov	r3, r0
 800573c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800574c:	e058      	b.n	8005800 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d055      	beq.n	8005800 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2204      	movs	r2, #4
 8005758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800575c:	e050      	b.n	8005800 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f860 	bl	800582a <GetLineCoding>
 800576a:	4603      	mov	r3, r0
 800576c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d126      	bne.n	80057c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	d13b      	bne.n	8005804 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005798:	429a      	cmp	r2, r3
 800579a:	d133      	bne.n	8005804 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d12b      	bne.n	8005804 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d124      	bne.n	8005804 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f958 	bl	8005a70 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80057c0:	e020      	b.n	8005804 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d01d      	beq.n	8005804 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2204      	movs	r2, #4
 80057cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80057d0:	e018      	b.n	8005804 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f867 	bl	80058a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f8da 	bl	8005992 <CDC_ProcessReception>
      break;
 80057de:	e014      	b.n	800580a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80057e0:	2100      	movs	r1, #0
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb08 	bl	8005df8 <USBH_ClrFeature>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80057fa:	e005      	b.n	8005808 <USBH_CDC_Process+0x120>

    default:
      break;
 80057fc:	bf00      	nop
 80057fe:	e004      	b.n	800580a <USBH_CDC_Process+0x122>
      break;
 8005800:	bf00      	nop
 8005802:	e002      	b.n	800580a <USBH_CDC_Process+0x122>
      break;
 8005804:	bf00      	nop
 8005806:	e000      	b.n	800580a <USBH_CDC_Process+0x122>
      break;
 8005808:	bf00      	nop

  }

  return status;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	22a1      	movs	r2, #161	; 0xa1
 8005838:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2221      	movs	r2, #33	; 0x21
 800583e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2207      	movs	r2, #7
 8005850:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2207      	movs	r2, #7
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 faf1 	bl	8005e40 <USBH_CtlReq>
 800585e:	4603      	mov	r3, r0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2221      	movs	r2, #33	; 0x21
 8005876:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2207      	movs	r2, #7
 800588e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2207      	movs	r2, #7
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fad2 	bl	8005e40 <USBH_CtlReq>
 800589c:	4603      	mov	r3, r0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af02      	add	r7, sp, #8
 80058ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d002      	beq.n	80058cc <CDC_ProcessTransmission+0x26>
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d023      	beq.n	8005912 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80058ca:	e05e      	b.n	800598a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	8b12      	ldrh	r2, [r2, #24]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d90b      	bls.n	80058f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8b1a      	ldrh	r2, [r3, #24]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	7b5b      	ldrb	r3, [r3, #13]
 80058e4:	2001      	movs	r0, #1
 80058e6:	9000      	str	r0, [sp, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fcb8 	bl	800625e <USBH_BulkSendData>
 80058ee:	e00b      	b.n	8005908 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	7b5b      	ldrb	r3, [r3, #13]
 80058fe:	2001      	movs	r0, #1
 8005900:	9000      	str	r0, [sp, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fcab 	bl	800625e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005910:	e03b      	b.n	800598a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	7b5b      	ldrb	r3, [r3, #13]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 ff83 	bl	8006824 <USBH_LL_GetURBState>
 800591e:	4603      	mov	r3, r0
 8005920:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005922:	7afb      	ldrb	r3, [r7, #11]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d128      	bne.n	800597a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	8b12      	ldrh	r2, [r2, #24]
 8005930:	4293      	cmp	r3, r2
 8005932:	d90e      	bls.n	8005952 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	8b12      	ldrh	r2, [r2, #24]
 800593c:	1a9a      	subs	r2, r3, r2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	8b12      	ldrh	r2, [r2, #24]
 800594a:	441a      	add	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	61da      	str	r2, [r3, #28]
 8005950:	e002      	b.n	8005958 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005968:	e00e      	b.n	8005988 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f868 	bl	8005a48 <USBH_CDC_TransmitCallback>
      break;
 8005978:	e006      	b.n	8005988 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d103      	bne.n	8005988 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005988:	bf00      	nop
  }
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d002      	beq.n	80059b8 <CDC_ProcessReception+0x26>
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d00e      	beq.n	80059d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80059b6:	e043      	b.n	8005a40 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6a19      	ldr	r1, [r3, #32]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	8b5a      	ldrh	r2, [r3, #26]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	7b1b      	ldrb	r3, [r3, #12]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fc6f 	bl	80062a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2204      	movs	r2, #4
 80059ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80059d2:	e035      	b.n	8005a40 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	7b1b      	ldrb	r3, [r3, #12]
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 ff22 	bl	8006824 <USBH_LL_GetURBState>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d129      	bne.n	8005a3e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	7b1b      	ldrb	r3, [r3, #12]
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fe85 	bl	8006700 <USBH_LL_GetLastXferSize>
 80059f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d016      	beq.n	8005a30 <CDC_ProcessReception+0x9e>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	8b5b      	ldrh	r3, [r3, #26]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d910      	bls.n	8005a30 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad2      	subs	r2, r2, r3
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	441a      	add	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2203      	movs	r2, #3
 8005a2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005a2e:	e006      	b.n	8005a3e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f80f 	bl	8005a5c <USBH_CDC_ReceiveCallback>
      break;
 8005a3e:	bf00      	nop
  }
}
 8005a40:	bf00      	nop
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e029      	b.n	8005af0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	79fa      	ldrb	r2, [r7, #7]
 8005aa0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f81f 	bl	8005af8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fd97 	bl	800661c <USBH_LL_Init>

  return USBH_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e009      	b.n	8005b1e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	33e0      	adds	r3, #224	; 0xe0
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	2200      	movs	r2, #0
 8005b16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b0f      	cmp	r3, #15
 8005b22:	d9f2      	bls.n	8005b0a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e009      	b.n	8005b3e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b44:	d3f1      	bcc.n	8005b2a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2240      	movs	r2, #64	; 0x40
 8005b6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d016      	beq.n	8005be2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10e      	bne.n	8005bdc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	33de      	adds	r3, #222	; 0xde
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
 8005bda:	e004      	b.n	8005be6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	e001      	b.n	8005be6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005be2:	2302      	movs	r3, #2
 8005be4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d204      	bcs.n	8005c1a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005c18:	e001      	b.n	8005c1e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	70fb      	strb	r3, [r7, #3]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70bb      	strb	r3, [r7, #2]
 8005c42:	4613      	mov	r3, r2
 8005c44:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005c54:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c56:	e025      	b.n	8005ca4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	221a      	movs	r2, #26
 8005c5c:	fb02 f303 	mul.w	r3, r2, r3
 8005c60:	3308      	adds	r3, #8
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	3302      	adds	r3, #2
 8005c68:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	795b      	ldrb	r3, [r3, #5]
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d002      	beq.n	8005c7a <USBH_FindInterface+0x4e>
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	2bff      	cmp	r3, #255	; 0xff
 8005c78:	d111      	bne.n	8005c9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c7e:	78ba      	ldrb	r2, [r7, #2]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d002      	beq.n	8005c8a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c84:	78bb      	ldrb	r3, [r7, #2]
 8005c86:	2bff      	cmp	r3, #255	; 0xff
 8005c88:	d109      	bne.n	8005c9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c8e:	787a      	ldrb	r2, [r7, #1]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d002      	beq.n	8005c9a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c94:	787b      	ldrb	r3, [r7, #1]
 8005c96:	2bff      	cmp	r3, #255	; 0xff
 8005c98:	d101      	bne.n	8005c9e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	e006      	b.n	8005cac <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d9d6      	bls.n	8005c58 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005caa:	23ff      	movs	r3, #255	; 0xff
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fce7 	bl	8006694 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fdbe 	bl	800684a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b082      	sub	sp, #8
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f804 	bl	8005d1a <USBH_HandleSof>
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b0b      	cmp	r3, #11
 8005d2a:	d10a      	bne.n	8005d42 <USBH_HandleSof+0x28>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
  }
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005d5a:	bf00      	nop
}
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005d76:	bf00      	nop
}
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fc7a 	bl	80066ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	791b      	ldrb	r3, [r3, #4]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fad1 	bl	8006384 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	795b      	ldrb	r3, [r3, #5]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 facb 	bl	8006384 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	789b      	ldrb	r3, [r3, #2]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10f      	bne.n	8005e2c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2100      	movs	r1, #0
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f805 	bl	8005e40 <USBH_CtlReq>
 8005e36:	4603      	mov	r3, r0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	789b      	ldrb	r3, [r3, #2]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d002      	beq.n	8005e60 <USBH_CtlReq+0x20>
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d00f      	beq.n	8005e7e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005e5e:	e027      	b.n	8005eb0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7c:	e018      	b.n	8005eb0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f81c 	bl	8005ebc <USBH_HandleControl>
 8005e84:	4603      	mov	r3, r0
 8005e86:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <USBH_CtlReq+0x54>
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d106      	bne.n	8005ea2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	761a      	strb	r2, [r3, #24]
      break;
 8005ea0:	e005      	b.n	8005eae <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d102      	bne.n	8005eae <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	709a      	strb	r2, [r3, #2]
      break;
 8005eae:	bf00      	nop
  }
  return status;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	7e1b      	ldrb	r3, [r3, #24]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	2b0a      	cmp	r3, #10
 8005ed4:	f200 8156 	bhi.w	8006184 <USBH_HandleControl+0x2c8>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <USBH_HandleControl+0x24>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	08005f27 	.word	0x08005f27
 8005ee8:	08005f91 	.word	0x08005f91
 8005eec:	08005fb7 	.word	0x08005fb7
 8005ef0:	08005fef 	.word	0x08005fef
 8005ef4:	08006019 	.word	0x08006019
 8005ef8:	0800606b 	.word	0x0800606b
 8005efc:	0800608d 	.word	0x0800608d
 8005f00:	080060c9 	.word	0x080060c9
 8005f04:	080060ef 	.word	0x080060ef
 8005f08:	0800612d 	.word	0x0800612d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f103 0110 	add.w	r1, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	795b      	ldrb	r3, [r3, #5]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f943 	bl	80061a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	761a      	strb	r2, [r3, #24]
      break;
 8005f24:	e139      	b.n	800619a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	795b      	ldrb	r3, [r3, #5]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fc79 	bl	8006824 <USBH_LL_GetURBState>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d11e      	bne.n	8005f7a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	7c1b      	ldrb	r3, [r3, #16]
 8005f40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f44:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8adb      	ldrh	r3, [r3, #22]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	d103      	bne.n	8005f5c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2203      	movs	r2, #3
 8005f58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005f5a:	e115      	b.n	8006188 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2205      	movs	r2, #5
 8005f60:	761a      	strb	r2, [r3, #24]
      break;
 8005f62:	e111      	b.n	8006188 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005f64:	7b7b      	ldrb	r3, [r7, #13]
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d103      	bne.n	8005f72 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2209      	movs	r2, #9
 8005f6e:	761a      	strb	r2, [r3, #24]
      break;
 8005f70:	e10a      	b.n	8006188 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2207      	movs	r2, #7
 8005f76:	761a      	strb	r2, [r3, #24]
      break;
 8005f78:	e106      	b.n	8006188 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d003      	beq.n	8005f88 <USBH_HandleControl+0xcc>
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	f040 8100 	bne.w	8006188 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	220b      	movs	r2, #11
 8005f8c:	761a      	strb	r2, [r3, #24]
      break;
 8005f8e:	e0fb      	b.n	8006188 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6899      	ldr	r1, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	899a      	ldrh	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	791b      	ldrb	r3, [r3, #4]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f93a 	bl	8006222 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	761a      	strb	r2, [r3, #24]
      break;
 8005fb4:	e0f1      	b.n	800619a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	791b      	ldrb	r3, [r3, #4]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fc31 	bl	8006824 <USBH_LL_GetURBState>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d102      	bne.n	8005fd2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2209      	movs	r2, #9
 8005fd0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	2b05      	cmp	r3, #5
 8005fd6:	d102      	bne.n	8005fde <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005fdc:	e0d6      	b.n	800618c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	f040 80d3 	bne.w	800618c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	220b      	movs	r2, #11
 8005fea:	761a      	strb	r2, [r3, #24]
      break;
 8005fec:	e0ce      	b.n	800618c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6899      	ldr	r1, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	899a      	ldrh	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	795b      	ldrb	r3, [r3, #5]
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	9000      	str	r0, [sp, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8ea 	bl	80061d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2206      	movs	r2, #6
 8006014:	761a      	strb	r2, [r3, #24]
      break;
 8006016:	e0c0      	b.n	800619a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	795b      	ldrb	r3, [r3, #5]
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fc00 	bl	8006824 <USBH_LL_GetURBState>
 8006024:	4603      	mov	r3, r0
 8006026:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d103      	bne.n	8006036 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2207      	movs	r2, #7
 8006032:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006034:	e0ac      	b.n	8006190 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b05      	cmp	r3, #5
 800603a:	d105      	bne.n	8006048 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	220c      	movs	r2, #12
 8006040:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
      break;
 8006046:	e0a3      	b.n	8006190 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d103      	bne.n	8006056 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2205      	movs	r2, #5
 8006052:	761a      	strb	r2, [r3, #24]
      break;
 8006054:	e09c      	b.n	8006190 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	2b04      	cmp	r3, #4
 800605a:	f040 8099 	bne.w	8006190 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	220b      	movs	r2, #11
 8006062:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006064:	2302      	movs	r3, #2
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e092      	b.n	8006190 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	791b      	ldrb	r3, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	2100      	movs	r1, #0
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8d5 	bl	8006222 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800607e:	b29a      	uxth	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2208      	movs	r2, #8
 8006088:	761a      	strb	r2, [r3, #24]

      break;
 800608a:	e086      	b.n	800619a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	791b      	ldrb	r3, [r3, #4]
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fbc6 	bl	8006824 <USBH_LL_GetURBState>
 8006098:	4603      	mov	r3, r0
 800609a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d105      	bne.n	80060ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	220d      	movs	r2, #13
 80060a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80060ac:	e072      	b.n	8006194 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d103      	bne.n	80060bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	220b      	movs	r2, #11
 80060b8:	761a      	strb	r2, [r3, #24]
      break;
 80060ba:	e06b      	b.n	8006194 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d168      	bne.n	8006194 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80060c2:	2303      	movs	r3, #3
 80060c4:	73fb      	strb	r3, [r7, #15]
      break;
 80060c6:	e065      	b.n	8006194 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	795b      	ldrb	r3, [r3, #5]
 80060cc:	2201      	movs	r2, #1
 80060ce:	9200      	str	r2, [sp, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2100      	movs	r1, #0
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f87f 	bl	80061d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	220a      	movs	r2, #10
 80060ea:	761a      	strb	r2, [r3, #24]
      break;
 80060ec:	e055      	b.n	800619a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	795b      	ldrb	r3, [r3, #5]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fb95 	bl	8006824 <USBH_LL_GetURBState>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d105      	bne.n	8006110 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	220d      	movs	r2, #13
 800610c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800610e:	e043      	b.n	8006198 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d103      	bne.n	800611e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2209      	movs	r2, #9
 800611a:	761a      	strb	r2, [r3, #24]
      break;
 800611c:	e03c      	b.n	8006198 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d139      	bne.n	8006198 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	220b      	movs	r2, #11
 8006128:	761a      	strb	r2, [r3, #24]
      break;
 800612a:	e035      	b.n	8006198 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	7e5b      	ldrb	r3, [r3, #25]
 8006130:	3301      	adds	r3, #1
 8006132:	b2da      	uxtb	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	765a      	strb	r2, [r3, #25]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	7e5b      	ldrb	r3, [r3, #25]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d806      	bhi.n	800614e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800614c:	e025      	b.n	800619a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006154:	2106      	movs	r1, #6
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	795b      	ldrb	r3, [r3, #5]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f90c 	bl	8006384 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	791b      	ldrb	r3, [r3, #4]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f906 	bl	8006384 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800617e:	2302      	movs	r3, #2
 8006180:	73fb      	strb	r3, [r7, #15]
      break;
 8006182:	e00a      	b.n	800619a <USBH_HandleControl+0x2de>

    default:
      break;
 8006184:	bf00      	nop
 8006186:	e008      	b.n	800619a <USBH_HandleControl+0x2de>
      break;
 8006188:	bf00      	nop
 800618a:	e006      	b.n	800619a <USBH_HandleControl+0x2de>
      break;
 800618c:	bf00      	nop
 800618e:	e004      	b.n	800619a <USBH_HandleControl+0x2de>
      break;
 8006190:	bf00      	nop
 8006192:	e002      	b.n	800619a <USBH_HandleControl+0x2de>
      break;
 8006194:	bf00      	nop
 8006196:	e000      	b.n	800619a <USBH_HandleControl+0x2de>
      break;
 8006198:	bf00      	nop
  }

  return status;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af04      	add	r7, sp, #16
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80061b2:	79f9      	ldrb	r1, [r7, #7]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9303      	str	r3, [sp, #12]
 80061b8:	2308      	movs	r3, #8
 80061ba:	9302      	str	r3, [sp, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	2300      	movs	r3, #0
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	2300      	movs	r3, #0
 80061c6:	2200      	movs	r2, #0
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fafa 	bl	80067c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af04      	add	r7, sp, #16
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	460b      	mov	r3, r1
 80061e8:	80fb      	strh	r3, [r7, #6]
 80061ea:	4613      	mov	r3, r2
 80061ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80061fc:	7979      	ldrb	r1, [r7, #5]
 80061fe:	7e3b      	ldrb	r3, [r7, #24]
 8006200:	9303      	str	r3, [sp, #12]
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	9302      	str	r3, [sp, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	2301      	movs	r3, #1
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2300      	movs	r3, #0
 8006210:	2200      	movs	r2, #0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fad5 	bl	80067c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b088      	sub	sp, #32
 8006226:	af04      	add	r7, sp, #16
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	4611      	mov	r1, r2
 800622e:	461a      	mov	r2, r3
 8006230:	460b      	mov	r3, r1
 8006232:	80fb      	strh	r3, [r7, #6]
 8006234:	4613      	mov	r3, r2
 8006236:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006238:	7979      	ldrb	r1, [r7, #5]
 800623a:	2300      	movs	r3, #0
 800623c:	9303      	str	r3, [sp, #12]
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	9302      	str	r3, [sp, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	2301      	movs	r3, #1
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2300      	movs	r3, #0
 800624c:	2201      	movs	r2, #1
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fab7 	bl	80067c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006254:	2300      	movs	r3, #0

}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af04      	add	r7, sp, #16
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	4611      	mov	r1, r2
 800626a:	461a      	mov	r2, r3
 800626c:	460b      	mov	r3, r1
 800626e:	80fb      	strh	r3, [r7, #6]
 8006270:	4613      	mov	r3, r2
 8006272:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006282:	7979      	ldrb	r1, [r7, #5]
 8006284:	7e3b      	ldrb	r3, [r7, #24]
 8006286:	9303      	str	r3, [sp, #12]
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	9302      	str	r3, [sp, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	2301      	movs	r3, #1
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2302      	movs	r3, #2
 8006296:	2200      	movs	r2, #0
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fa92 	bl	80067c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af04      	add	r7, sp, #16
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	460b      	mov	r3, r1
 80062b8:	80fb      	strh	r3, [r7, #6]
 80062ba:	4613      	mov	r3, r2
 80062bc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80062be:	7979      	ldrb	r1, [r7, #5]
 80062c0:	2300      	movs	r3, #0
 80062c2:	9303      	str	r3, [sp, #12]
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	9302      	str	r3, [sp, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	2301      	movs	r3, #1
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2302      	movs	r3, #2
 80062d2:	2201      	movs	r2, #1
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fa74 	bl	80067c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	4608      	mov	r0, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	70fb      	strb	r3, [r7, #3]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70bb      	strb	r3, [r7, #2]
 80062fa:	4613      	mov	r3, r2
 80062fc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80062fe:	7878      	ldrb	r0, [r7, #1]
 8006300:	78ba      	ldrb	r2, [r7, #2]
 8006302:	78f9      	ldrb	r1, [r7, #3]
 8006304:	8b3b      	ldrh	r3, [r7, #24]
 8006306:	9302      	str	r3, [sp, #8]
 8006308:	7d3b      	ldrb	r3, [r7, #20]
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	7c3b      	ldrb	r3, [r7, #16]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4603      	mov	r3, r0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fa07 	bl	8006726 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	460b      	mov	r3, r1
 800632c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa26 	bl	8006784 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f836 	bl	80063c0 <USBH_GetFreePipe>
 8006354:	4603      	mov	r3, r0
 8006356:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006358:	89fb      	ldrh	r3, [r7, #14]
 800635a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800635e:	4293      	cmp	r3, r2
 8006360:	d00a      	beq.n	8006378 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	89fb      	ldrh	r3, [r7, #14]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	33e0      	adds	r3, #224	; 0xe0
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006378:	89fb      	ldrh	r3, [r7, #14]
 800637a:	b2db      	uxtb	r3, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b0f      	cmp	r3, #15
 8006394:	d80d      	bhi.n	80063b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	33e0      	adds	r3, #224	; 0xe0
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	33e0      	adds	r3, #224	; 0xe0
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
 80063d0:	e00f      	b.n	80063f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	33e0      	adds	r3, #224	; 0xe0
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	e007      	b.n	80063fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	3301      	adds	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d9ec      	bls.n	80063d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80063f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800640c:	2201      	movs	r2, #1
 800640e:	490e      	ldr	r1, [pc, #56]	; (8006448 <MX_USB_HOST_Init+0x40>)
 8006410:	480e      	ldr	r0, [pc, #56]	; (800644c <MX_USB_HOST_Init+0x44>)
 8006412:	f7ff fb37 	bl	8005a84 <USBH_Init>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800641c:	f7fa fa7a 	bl	8000914 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006420:	490b      	ldr	r1, [pc, #44]	; (8006450 <MX_USB_HOST_Init+0x48>)
 8006422:	480a      	ldr	r0, [pc, #40]	; (800644c <MX_USB_HOST_Init+0x44>)
 8006424:	f7ff fbbc 	bl	8005ba0 <USBH_RegisterClass>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800642e:	f7fa fa71 	bl	8000914 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006432:	4806      	ldr	r0, [pc, #24]	; (800644c <MX_USB_HOST_Init+0x44>)
 8006434:	f7ff fc40 	bl	8005cb8 <USBH_Start>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800643e:	f7fa fa69 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	08006455 	.word	0x08006455
 800644c:	200001a8 	.word	0x200001a8
 8006450:	2000000c 	.word	0x2000000c

08006454 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	3b01      	subs	r3, #1
 8006464:	2b04      	cmp	r3, #4
 8006466:	d819      	bhi.n	800649c <USBH_UserProcess+0x48>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBH_UserProcess+0x1c>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	0800649d 	.word	0x0800649d
 8006474:	0800648d 	.word	0x0800648d
 8006478:	0800649d 	.word	0x0800649d
 800647c:	08006495 	.word	0x08006495
 8006480:	08006485 	.word	0x08006485
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006484:	4b09      	ldr	r3, [pc, #36]	; (80064ac <USBH_UserProcess+0x58>)
 8006486:	2203      	movs	r2, #3
 8006488:	701a      	strb	r2, [r3, #0]
  break;
 800648a:	e008      	b.n	800649e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <USBH_UserProcess+0x58>)
 800648e:	2202      	movs	r2, #2
 8006490:	701a      	strb	r2, [r3, #0]
  break;
 8006492:	e004      	b.n	800649e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <USBH_UserProcess+0x58>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
  break;
 800649a:	e000      	b.n	800649e <USBH_UserProcess+0x4a>

  default:
  break;
 800649c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000580 	.word	0x20000580

080064b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	605a      	str	r2, [r3, #4]
 80064c2:	609a      	str	r2, [r3, #8]
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064d0:	d147      	bne.n	8006562 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	4b25      	ldr	r3, [pc, #148]	; (800656c <HAL_HCD_MspInit+0xbc>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	4a24      	ldr	r2, [pc, #144]	; (800656c <HAL_HCD_MspInit+0xbc>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6313      	str	r3, [r2, #48]	; 0x30
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <HAL_HCD_MspInit+0xbc>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80064ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	4619      	mov	r1, r3
 8006502:	481b      	ldr	r0, [pc, #108]	; (8006570 <HAL_HCD_MspInit+0xc0>)
 8006504:	f7fa fd92 	bl	800102c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006508:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800650c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650e:	2302      	movs	r3, #2
 8006510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006516:	2300      	movs	r3, #0
 8006518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800651a:	230a      	movs	r3, #10
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	4619      	mov	r1, r3
 8006524:	4812      	ldr	r0, [pc, #72]	; (8006570 <HAL_HCD_MspInit+0xc0>)
 8006526:	f7fa fd81 	bl	800102c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800652a:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_HCD_MspInit+0xbc>)
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	4a0f      	ldr	r2, [pc, #60]	; (800656c <HAL_HCD_MspInit+0xbc>)
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	6353      	str	r3, [r2, #52]	; 0x34
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <HAL_HCD_MspInit+0xbc>)
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	4a0b      	ldr	r2, [pc, #44]	; (800656c <HAL_HCD_MspInit+0xbc>)
 8006540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006544:	6453      	str	r3, [r2, #68]	; 0x44
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <HAL_HCD_MspInit+0xbc>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	2043      	movs	r0, #67	; 0x43
 8006558:	f7fa fd31 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800655c:	2043      	movs	r0, #67	; 0x43
 800655e:	f7fa fd4a 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006562:	bf00      	nop
 8006564:	3728      	adds	r7, #40	; 0x28
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40023800 	.word	0x40023800
 8006570:	40020000 	.word	0x40020000

08006574 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fbb7 	bl	8005cf6 <USBH_LL_IncTimer>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fbef 	bl	8005d82 <USBH_LL_Connect>
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff fbf8 	bl	8005db0 <USBH_LL_Disconnect>
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
 80065d4:	4613      	mov	r3, r2
 80065d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fba9 	bl	8005d4a <USBH_LL_PortEnabled>
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fba9 	bl	8005d66 <USBH_LL_PortDisabled>
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800662a:	2b01      	cmp	r3, #1
 800662c:	d12a      	bne.n	8006684 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800662e:	4a18      	ldr	r2, [pc, #96]	; (8006690 <USBH_LL_Init+0x74>)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <USBH_LL_Init+0x74>)
 800663a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <USBH_LL_Init+0x74>)
 8006640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006644:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <USBH_LL_Init+0x74>)
 8006648:	2208      	movs	r2, #8
 800664a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <USBH_LL_Init+0x74>)
 800664e:	2201      	movs	r2, #1
 8006650:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <USBH_LL_Init+0x74>)
 8006654:	2200      	movs	r2, #0
 8006656:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <USBH_LL_Init+0x74>)
 800665a:	2202      	movs	r2, #2
 800665c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800665e:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <USBH_LL_Init+0x74>)
 8006660:	2200      	movs	r2, #0
 8006662:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006664:	480a      	ldr	r0, [pc, #40]	; (8006690 <USBH_LL_Init+0x74>)
 8006666:	f7fa fe96 	bl	8001396 <HAL_HCD_Init>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006670:	f7fa f950 	bl	8000914 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006674:	4806      	ldr	r0, [pc, #24]	; (8006690 <USBH_LL_Init+0x74>)
 8006676:	f7fb fa6c 	bl	8001b52 <HAL_HCD_GetCurrentFrame>
 800667a:	4603      	mov	r3, r0
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fb2a 	bl	8005cd8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000584 	.word	0x20000584

08006694 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fb f9e9 	bl	8001a82 <HAL_HCD_Start>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f90e 	bl	80068d8 <USBH_Get_USB_Status>
 80066bc:	4603      	mov	r3, r0
 80066be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fb f9f1 	bl	8001ac8 <HAL_HCD_Stop>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f8f3 	bl	80068d8 <USBH_Get_USB_Status>
 80066f2:	4603      	mov	r3, r0
 80066f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7fb fa07 	bl	8001b2a <HAL_HCD_HC_GetXferCount>
 800671c:	4603      	mov	r3, r0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006726:	b590      	push	{r4, r7, lr}
 8006728:	b089      	sub	sp, #36	; 0x24
 800672a:	af04      	add	r7, sp, #16
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	4608      	mov	r0, r1
 8006730:	4611      	mov	r1, r2
 8006732:	461a      	mov	r2, r3
 8006734:	4603      	mov	r3, r0
 8006736:	70fb      	strb	r3, [r7, #3]
 8006738:	460b      	mov	r3, r1
 800673a:	70bb      	strb	r3, [r7, #2]
 800673c:	4613      	mov	r3, r2
 800673e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800674e:	787c      	ldrb	r4, [r7, #1]
 8006750:	78ba      	ldrb	r2, [r7, #2]
 8006752:	78f9      	ldrb	r1, [r7, #3]
 8006754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	4623      	mov	r3, r4
 8006766:	f7fa fe78 	bl	800145a <HAL_HCD_HC_Init>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f8b1 	bl	80068d8 <USBH_Get_USB_Status>
 8006776:	4603      	mov	r3, r0
 8006778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800677a:	7bbb      	ldrb	r3, [r7, #14]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	bd90      	pop	{r4, r7, pc}

08006784 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800679e:	78fa      	ldrb	r2, [r7, #3]
 80067a0:	4611      	mov	r1, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fa fee8 	bl	8001578 <HAL_HCD_HC_Halt>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 f892 	bl	80068d8 <USBH_Get_USB_Status>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80067c2:	b590      	push	{r4, r7, lr}
 80067c4:	b089      	sub	sp, #36	; 0x24
 80067c6:	af04      	add	r7, sp, #16
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	461a      	mov	r2, r3
 80067d0:	4603      	mov	r3, r0
 80067d2:	70fb      	strb	r3, [r7, #3]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70bb      	strb	r3, [r7, #2]
 80067d8:	4613      	mov	r3, r2
 80067da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80067ea:	787c      	ldrb	r4, [r7, #1]
 80067ec:	78ba      	ldrb	r2, [r7, #2]
 80067ee:	78f9      	ldrb	r1, [r7, #3]
 80067f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067f4:	9303      	str	r3, [sp, #12]
 80067f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067f8:	9302      	str	r3, [sp, #8]
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	9301      	str	r3, [sp, #4]
 80067fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4623      	mov	r3, r4
 8006806:	f7fa fedb 	bl	80015c0 <HAL_HCD_HC_SubmitRequest>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f861 	bl	80068d8 <USBH_Get_USB_Status>
 8006816:	4603      	mov	r3, r0
 8006818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800681a:	7bbb      	ldrb	r3, [r7, #14]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	bd90      	pop	{r4, r7, pc}

08006824 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f7fb f961 	bl	8001b02 <HAL_HCD_HC_GetURBState>
 8006840:	4603      	mov	r3, r0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800685c:	2b01      	cmp	r3, #1
 800685e:	d103      	bne.n	8006868 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f864 	bl	8006930 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006868:	20c8      	movs	r0, #200	; 0xc8
 800686a:	f7fa faa9 	bl	8000dc0 <HAL_Delay>
  return USBH_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
 8006884:	4613      	mov	r3, r2
 8006886:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800688e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	212c      	movs	r1, #44	; 0x2c
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	333b      	adds	r3, #59	; 0x3b
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	212c      	movs	r1, #44	; 0x2c
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	3354      	adds	r3, #84	; 0x54
 80068b2:	78ba      	ldrb	r2, [r7, #2]
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e008      	b.n	80068ca <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	212c      	movs	r1, #44	; 0x2c
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	4413      	add	r3, r2
 80068c4:	3355      	adds	r3, #85	; 0x55
 80068c6:	78ba      	ldrb	r2, [r7, #2]
 80068c8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d817      	bhi.n	800691c <USBH_Get_USB_Status+0x44>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <USBH_Get_USB_Status+0x1c>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006905 	.word	0x08006905
 80068f8:	0800690b 	.word	0x0800690b
 80068fc:	08006911 	.word	0x08006911
 8006900:	08006917 	.word	0x08006917
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
    break;
 8006908:	e00b      	b.n	8006922 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800690a:	2302      	movs	r3, #2
 800690c:	73fb      	strb	r3, [r7, #15]
    break;
 800690e:	e008      	b.n	8006922 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
    break;
 8006914:	e005      	b.n	8006922 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006916:	2302      	movs	r3, #2
 8006918:	73fb      	strb	r3, [r7, #15]
    break;
 800691a:	e002      	b.n	8006922 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800691c:	2302      	movs	r3, #2
 800691e:	73fb      	strb	r3, [r7, #15]
    break;
 8006920:	bf00      	nop
  }
  return usb_status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
 8006948:	e001      	b.n	800694e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800694a:	2301      	movs	r3, #1
 800694c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	461a      	mov	r2, r3
 8006952:	2101      	movs	r1, #1
 8006954:	4803      	ldr	r0, [pc, #12]	; (8006964 <MX_DriverVbusFS+0x34>)
 8006956:	f7fa fd05 	bl	8001364 <HAL_GPIO_WritePin>
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40020800 	.word	0x40020800

08006968 <__errno>:
 8006968:	4b01      	ldr	r3, [pc, #4]	; (8006970 <__errno+0x8>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000002c 	.word	0x2000002c

08006974 <__libc_init_array>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	4d0d      	ldr	r5, [pc, #52]	; (80069ac <__libc_init_array+0x38>)
 8006978:	4c0d      	ldr	r4, [pc, #52]	; (80069b0 <__libc_init_array+0x3c>)
 800697a:	1b64      	subs	r4, r4, r5
 800697c:	10a4      	asrs	r4, r4, #2
 800697e:	2600      	movs	r6, #0
 8006980:	42a6      	cmp	r6, r4
 8006982:	d109      	bne.n	8006998 <__libc_init_array+0x24>
 8006984:	4d0b      	ldr	r5, [pc, #44]	; (80069b4 <__libc_init_array+0x40>)
 8006986:	4c0c      	ldr	r4, [pc, #48]	; (80069b8 <__libc_init_array+0x44>)
 8006988:	f000 f92e 	bl	8006be8 <_init>
 800698c:	1b64      	subs	r4, r4, r5
 800698e:	10a4      	asrs	r4, r4, #2
 8006990:	2600      	movs	r6, #0
 8006992:	42a6      	cmp	r6, r4
 8006994:	d105      	bne.n	80069a2 <__libc_init_array+0x2e>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	f855 3b04 	ldr.w	r3, [r5], #4
 800699c:	4798      	blx	r3
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <__libc_init_array+0xc>
 80069a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a6:	4798      	blx	r3
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7f2      	b.n	8006992 <__libc_init_array+0x1e>
 80069ac:	08006c24 	.word	0x08006c24
 80069b0:	08006c24 	.word	0x08006c24
 80069b4:	08006c24 	.word	0x08006c24
 80069b8:	08006c28 	.word	0x08006c28

080069bc <malloc>:
 80069bc:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <malloc+0xc>)
 80069be:	4601      	mov	r1, r0
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f000 b87f 	b.w	8006ac4 <_malloc_r>
 80069c6:	bf00      	nop
 80069c8:	2000002c 	.word	0x2000002c

080069cc <free>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <free+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f000 b80b 	b.w	80069ec <_free_r>
 80069d6:	bf00      	nop
 80069d8:	2000002c 	.word	0x2000002c

080069dc <memset>:
 80069dc:	4402      	add	r2, r0
 80069de:	4603      	mov	r3, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <_free_r>:
 80069ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d044      	beq.n	8006a7c <_free_r+0x90>
 80069f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f6:	9001      	str	r0, [sp, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f1a1 0404 	sub.w	r4, r1, #4
 80069fe:	bfb8      	it	lt
 8006a00:	18e4      	addlt	r4, r4, r3
 8006a02:	f000 f8e3 	bl	8006bcc <__malloc_lock>
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <_free_r+0x94>)
 8006a08:	9801      	ldr	r0, [sp, #4]
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x30>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	b003      	add	sp, #12
 8006a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a18:	f000 b8de 	b.w	8006bd8 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x46>
 8006a20:	6825      	ldr	r5, [r4, #0]
 8006a22:	1961      	adds	r1, r4, r5
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1949      	addeq	r1, r1, r5
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x22>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x50>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x46>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1855      	adds	r5, r2, r1
 8006a40:	42a5      	cmp	r5, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x70>
 8006a44:	6824      	ldr	r4, [r4, #0]
 8006a46:	4421      	add	r1, r4
 8006a48:	1854      	adds	r4, r2, r1
 8006a4a:	42a3      	cmp	r3, r4
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x26>
 8006a50:	681c      	ldr	r4, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	4421      	add	r1, r4
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x26>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x78>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	6003      	str	r3, [r0, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x26>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf04      	itt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	bf04      	itt	eq
 8006a74:	1949      	addeq	r1, r1, r5
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	6054      	str	r4, [r2, #4]
 8006a7a:	e7ca      	b.n	8006a12 <_free_r+0x26>
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bd30      	pop	{r4, r5, pc}
 8006a80:	20000888 	.word	0x20000888

08006a84 <sbrk_aligned>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4e0e      	ldr	r6, [pc, #56]	; (8006ac0 <sbrk_aligned+0x3c>)
 8006a88:	460c      	mov	r4, r1
 8006a8a:	6831      	ldr	r1, [r6, #0]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	b911      	cbnz	r1, 8006a96 <sbrk_aligned+0x12>
 8006a90:	f000 f88c 	bl	8006bac <_sbrk_r>
 8006a94:	6030      	str	r0, [r6, #0]
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 f887 	bl	8006bac <_sbrk_r>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d00a      	beq.n	8006ab8 <sbrk_aligned+0x34>
 8006aa2:	1cc4      	adds	r4, r0, #3
 8006aa4:	f024 0403 	bic.w	r4, r4, #3
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d007      	beq.n	8006abc <sbrk_aligned+0x38>
 8006aac:	1a21      	subs	r1, r4, r0
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f87c 	bl	8006bac <_sbrk_r>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d101      	bne.n	8006abc <sbrk_aligned+0x38>
 8006ab8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006abc:	4620      	mov	r0, r4
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	2000088c 	.word	0x2000088c

08006ac4 <_malloc_r>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	1ccd      	adds	r5, r1, #3
 8006aca:	f025 0503 	bic.w	r5, r5, #3
 8006ace:	3508      	adds	r5, #8
 8006ad0:	2d0c      	cmp	r5, #12
 8006ad2:	bf38      	it	cc
 8006ad4:	250c      	movcc	r5, #12
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	4607      	mov	r7, r0
 8006ada:	db01      	blt.n	8006ae0 <_malloc_r+0x1c>
 8006adc:	42a9      	cmp	r1, r5
 8006ade:	d905      	bls.n	8006aec <_malloc_r+0x28>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aec:	4e2e      	ldr	r6, [pc, #184]	; (8006ba8 <_malloc_r+0xe4>)
 8006aee:	f000 f86d 	bl	8006bcc <__malloc_lock>
 8006af2:	6833      	ldr	r3, [r6, #0]
 8006af4:	461c      	mov	r4, r3
 8006af6:	bb34      	cbnz	r4, 8006b46 <_malloc_r+0x82>
 8006af8:	4629      	mov	r1, r5
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ffc2 	bl	8006a84 <sbrk_aligned>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	4604      	mov	r4, r0
 8006b04:	d14d      	bne.n	8006ba2 <_malloc_r+0xde>
 8006b06:	6834      	ldr	r4, [r6, #0]
 8006b08:	4626      	mov	r6, r4
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d140      	bne.n	8006b90 <_malloc_r+0xcc>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	4631      	mov	r1, r6
 8006b12:	4638      	mov	r0, r7
 8006b14:	eb04 0803 	add.w	r8, r4, r3
 8006b18:	f000 f848 	bl	8006bac <_sbrk_r>
 8006b1c:	4580      	cmp	r8, r0
 8006b1e:	d13a      	bne.n	8006b96 <_malloc_r+0xd2>
 8006b20:	6821      	ldr	r1, [r4, #0]
 8006b22:	3503      	adds	r5, #3
 8006b24:	1a6d      	subs	r5, r5, r1
 8006b26:	f025 0503 	bic.w	r5, r5, #3
 8006b2a:	3508      	adds	r5, #8
 8006b2c:	2d0c      	cmp	r5, #12
 8006b2e:	bf38      	it	cc
 8006b30:	250c      	movcc	r5, #12
 8006b32:	4629      	mov	r1, r5
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ffa5 	bl	8006a84 <sbrk_aligned>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d02b      	beq.n	8006b96 <_malloc_r+0xd2>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	442b      	add	r3, r5
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	e00e      	b.n	8006b64 <_malloc_r+0xa0>
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	1b52      	subs	r2, r2, r5
 8006b4a:	d41e      	bmi.n	8006b8a <_malloc_r+0xc6>
 8006b4c:	2a0b      	cmp	r2, #11
 8006b4e:	d916      	bls.n	8006b7e <_malloc_r+0xba>
 8006b50:	1961      	adds	r1, r4, r5
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	bf18      	it	ne
 8006b58:	6059      	strne	r1, [r3, #4]
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	bf08      	it	eq
 8006b5e:	6031      	streq	r1, [r6, #0]
 8006b60:	5162      	str	r2, [r4, r5]
 8006b62:	604b      	str	r3, [r1, #4]
 8006b64:	4638      	mov	r0, r7
 8006b66:	f104 060b 	add.w	r6, r4, #11
 8006b6a:	f000 f835 	bl	8006bd8 <__malloc_unlock>
 8006b6e:	f026 0607 	bic.w	r6, r6, #7
 8006b72:	1d23      	adds	r3, r4, #4
 8006b74:	1af2      	subs	r2, r6, r3
 8006b76:	d0b6      	beq.n	8006ae6 <_malloc_r+0x22>
 8006b78:	1b9b      	subs	r3, r3, r6
 8006b7a:	50a3      	str	r3, [r4, r2]
 8006b7c:	e7b3      	b.n	8006ae6 <_malloc_r+0x22>
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	bf0c      	ite	eq
 8006b84:	6032      	streq	r2, [r6, #0]
 8006b86:	605a      	strne	r2, [r3, #4]
 8006b88:	e7ec      	b.n	8006b64 <_malloc_r+0xa0>
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	6864      	ldr	r4, [r4, #4]
 8006b8e:	e7b2      	b.n	8006af6 <_malloc_r+0x32>
 8006b90:	4634      	mov	r4, r6
 8006b92:	6876      	ldr	r6, [r6, #4]
 8006b94:	e7b9      	b.n	8006b0a <_malloc_r+0x46>
 8006b96:	230c      	movs	r3, #12
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f000 f81c 	bl	8006bd8 <__malloc_unlock>
 8006ba0:	e7a1      	b.n	8006ae6 <_malloc_r+0x22>
 8006ba2:	6025      	str	r5, [r4, #0]
 8006ba4:	e7de      	b.n	8006b64 <_malloc_r+0xa0>
 8006ba6:	bf00      	nop
 8006ba8:	20000888 	.word	0x20000888

08006bac <_sbrk_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4d06      	ldr	r5, [pc, #24]	; (8006bc8 <_sbrk_r+0x1c>)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	f7fa f81e 	bl	8000bf8 <_sbrk>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_sbrk_r+0x1a>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_sbrk_r+0x1a>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20000890 	.word	0x20000890

08006bcc <__malloc_lock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_lock+0x8>)
 8006bce:	f000 b809 	b.w	8006be4 <__retarget_lock_acquire_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	20000894 	.word	0x20000894

08006bd8 <__malloc_unlock>:
 8006bd8:	4801      	ldr	r0, [pc, #4]	; (8006be0 <__malloc_unlock+0x8>)
 8006bda:	f000 b804 	b.w	8006be6 <__retarget_lock_release_recursive>
 8006bde:	bf00      	nop
 8006be0:	20000894 	.word	0x20000894

08006be4 <__retarget_lock_acquire_recursive>:
 8006be4:	4770      	bx	lr

08006be6 <__retarget_lock_release_recursive>:
 8006be6:	4770      	bx	lr

08006be8 <_init>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr

08006bf4 <_fini>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr
